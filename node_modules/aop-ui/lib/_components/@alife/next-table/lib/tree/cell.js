'use strict';

exports.__esModule = true;
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nextIcon = require('../../../next-icon/lib/index.js');

var _nextIcon2 = _interopRequireDefault(_nextIcon);

var _cell = require('../base/cell.js');

var _cell2 = _interopRequireDefault(_cell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TreeCell = (_temp = _class = function (_React$Component) {
    (0, _inherits3.default)(TreeCell, _React$Component);

    function TreeCell() {
        (0, _classCallCheck3.default)(this, TreeCell);
        return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
    }

    TreeCell.prototype.onTreeNodeClick = function onTreeNodeClick(record, e) {
        e.stopPropagation();
        this.context.onTreeNodeClick(record);
    };

    TreeCell.prototype.render = function render() {
        var _props = this.props,
            colIndex = _props.colIndex,
            record = _props.record,
            prefix = _props.prefix,
            primaryKey = _props.primaryKey;
        var _context = this.context,
            openRowKeys = _context.openTreeRowKeys,
            indent = _context.indent,
            isTree = _context.isTree,
            rowSelection = _context.rowSelection;

        var treeArrowNodeIndex = rowSelection ? 1 : 0;
        var firstCellStyle = void 0,
            treeArrowNode = void 0;
        if (colIndex === treeArrowNodeIndex) {
            //
            var treeArrowType = void 0;
            if (isTree) {
                firstCellStyle = {
                    paddingLeft: indent * (record.__level + 1)
                };
                treeArrowNode = _react2.default.createElement(_nextIcon2.default, { size: 'xs', className: prefix + 'table-tree-placeholder' });
                if (record.children && record.children.length) {
                    if (openRowKeys.indexOf(record[primaryKey]) > -1) {
                        treeArrowType = 'arrow-down';
                    } else {
                        treeArrowType = 'arrow-right';
                    }
                    treeArrowNode = _react2.default.createElement(_nextIcon2.default, { type: treeArrowType, size: 'xs', onClick: this.onTreeNodeClick.bind(this, record) });
                }
            }
        }
        return _react2.default.createElement(
            _cell2.default,
            (0, _extends3.default)({}, this.props, { innerStyle: firstCellStyle }),
            treeArrowNode
        );
    };

    return TreeCell;
}(_react2.default.Component), _class.propTypes = (0, _extends3.default)({
    indent: _propTypes2.default.number
}, _cell2.default.propTypes), _class.defaultProps = (0, _extends3.default)({}, _cell2.default.defaultProps, {
    component: 'td',
    indent: 20
}), _class.contextTypes = {
    openTreeRowKeys: _propTypes2.default.array,
    indent: _propTypes2.default.number,
    onTreeNodeClick: _propTypes2.default.func,
    isTree: _propTypes2.default.bool,
    rowSelection: _propTypes2.default.object
}, _temp);
TreeCell.displayName = 'TreeCell';
exports.default = TreeCell;
module.exports = exports['default'];