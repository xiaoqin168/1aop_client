'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames6 = require('classnames');

var _classnames7 = _interopRequireDefault(_classnames6);

var _nextIcon = require('../../../next-icon/lib/index.js');

var _nextIcon2 = _interopRequireDefault(_nextIcon);

var _nextOverlay = require('../../../next-overlay/lib/index.js');

var _nextOverlay2 = _interopRequireDefault(_nextOverlay);

var _nextMenu = require('../../../next-menu/lib/index.js');

var _nextMenu2 = _interopRequireDefault(_nextMenu);

var _nextAnimate = require('../../../next-animate/lib/index.js');

var _nextAnimate2 = _interopRequireDefault(_nextAnimate);

var _nextUtil = require('../../../next-util/lib/index.js');

var _utils = require('./utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var floatRight = { float: 'right', position: 'relative', zIndex: 1 };
var Popup = _nextOverlay2.default.Popup;


function noop() {}

var Nav = (_temp = _class = function (_React$Component) {
    (0, _inherits3.default)(Nav, _React$Component);

    function Nav(props, context) {
        (0, _classCallCheck3.default)(this, Nav);

        var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props, context));

        _this.removeTab = function (key, e) {
            e && e.stopPropagation();
            _this.props.onClose(key);
        };

        _this.defaultTabTemplateRender = function (key, _ref) {
            var prefix = _ref.prefix,
                title = _ref.title,
                closeable = _ref.closeable;

            var tail = closeable ? _react2.default.createElement(_nextIcon2.default, { type: 'close', onClick: _this.removeTab.bind(_this, key), className: prefix + 'tabs-tab-close' }) : null;
            return _react2.default.createElement(
                'div',
                { className: _this.props.prefix + 'tabs-tab-inner' },
                title,
                tail
            );
        };

        _this.scrollToActiveTab = function () {
            var activeTabWH = (0, _utils.getOffsetWH)(_this.activeTab);
            var wrapperWH = (0, _utils.getOffsetWH)(_this.wrapper);

            var offset = _this.offset;
            var activeTabOffset = (0, _utils.getOffsetLT)(_this.activeTab);
            var wrapperOffset = (0, _utils.getOffsetLT)(_this.wrapper);

            if (wrapperOffset > activeTabOffset) {
                offset += wrapperOffset - activeTabOffset;
                _this.setOffset(offset);
            } else if (wrapperOffset + wrapperWH < activeTabOffset + activeTabWH) {
                offset -= activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH);
                _this.setOffset(offset);
            }
        };

        _this.onPrevClick = function () {
            var wrapperWH = (0, _utils.getOffsetWH)(_this.wrapper);
            _this.setOffset(_this.offset + wrapperWH);
        };

        _this.onNextClick = function () {
            var wrapperWH = (0, _utils.getOffsetWH)(_this.wrapper);
            _this.setOffset(_this.offset - wrapperWH);
        };

        _this.onSelectMenuItem = function (keys) {
            var _this$props = _this.props,
                onTriggerEvent = _this$props.onTriggerEvent,
                triggerType = _this$props.triggerType;

            onTriggerEvent(triggerType, keys[0]);
        };

        _this.onWindowResized = function () {
            if (_this.updateTimer) {
                clearTimeout(_this.updateTimer);
            }

            _this.updateTimer = setTimeout(function () {
                _this.setSlideBtn();
                _this.getDropdownItems(_this.props);
            }, 100);
        };

        _this.navRefHandler = function (ref) {
            _this.nav = (0, _reactDom.findDOMNode)(ref);
        };

        _this.wrapperRefHandler = function (ref) {
            _this.wrapper = ref;
        };

        _this.activeTabRefHandler = function (ref) {
            _this.activeTab = ref;
        };

        _this.state = {
            next: false,
            prev: false,
            dropdownTabs: []
        };
        _this.offset = 0;
        return _this;
    }

    Nav.prototype.componentDidMount = function componentDidMount() {
        this.setSlideBtn();
        this.getDropdownItems(this.props);
        _nextUtil.events.on(window, 'resize', this.onWindowResized);
    };

    Nav.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.tabs && this.props.tabs && nextProps.tabs.length !== this.props.tabs.length) {
            this.setSlideBtn();
        }
    };

    Nav.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (this.props.excessMode === 'slide') {
            this.isSlideBtnShown(this.state) !== this.isSlideBtnShown(prevState) && this.scrollToActiveTab();
        } else if (prevProps.tabs && this.props.tabs && prevProps.tabs.length !== this.props.tabs.length) {
            this.getDropdownItems(this.props);
        }
        this.setSlideBtn();
    };

    Nav.prototype.componentWillUnmount = function componentWillUnmount() {
        _nextUtil.events.off(window, 'resize', this.onWindowResized);
    };

    Nav.prototype.setOffset = function setOffset(offset) {
        var ifCheckSlideBtn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var target = Math.min(0, offset);
        if (this.offset !== target) {
            this.offset = target;
            var navOffset = {};
            var tabPosition = this.props.tabPosition;

            var navStyle = this.nav.style;

            var canTransform = (0, _utils.isTransformSupported)(navStyle);
            if (tabPosition === 'left' || tabPosition === 'right') {
                if (canTransform) {
                    navOffset = {
                        value: 'translate3d(0, ' + target + 'px, 0)'
                    };
                } else {
                    navOffset = {
                        name: 'top',
                        value: target + 'px'
                    };
                }
            } else {
                /* eslint-disable no-lonely-if */
                if (canTransform) {
                    navOffset = {
                        value: 'translate3d(' + target + 'px, 0, 0)'
                    };
                } else {
                    navOffset = {
                        name: 'left',
                        value: target + 'px'
                    };
                }
            }

            if (canTransform) {
                (0, _extends3.default)(navStyle, {
                    transform: navOffset.value,
                    webkitTransform: navOffset.value,
                    mozTransform: navOffset.value
                });
            } else {
                navStyle[navOffset.name] = navOffset.value;
            }

            if (ifCheckSlideBtn) {
                this.setSlideBtn();
            }
        }
    };

    Nav.prototype.setSlideBtn = function setSlideBtn() {
        var tabPosition = this.props.tabPosition;

        // TEMP: 这里会受 Animate 影响，re-render 过程中 this.nav 实际上指向的是上次的 tabList 元素，建议暂时关闭 animation 解决

        var navWH = (0, _utils.getOffsetWH)(this.nav, tabPosition);
        var wrapperWH = (0, _utils.getOffsetWH)(this.wrapper, tabPosition);

        var minOffset = wrapperWH - navWH;

        var next = void 0;
        var offset = this.offset;


        if (minOffset >= 0) {
            next = false;
            offset = 0;
            this.setOffset(0, false);
        } else if (minOffset < offset) {
            next = true;
        } else {
            next = false;
            offset = minOffset;
            this.setOffset(minOffset, false);
        }

        var prev = offset < 0;

        if (next !== this.state.next || prev !== this.state.prev) {
            this.setState({
                next: next,
                prev: prev
            });
        }

        return {
            next: next,
            prev: prev
        };
    };

    Nav.prototype.isSlideBtnShown = function isSlideBtnShown(state) {
        if (state) {
            return state.next || state.prev;
        }
        return this.state.next || this.state.prev;
    };

    Nav.prototype.getDropdownItems = function getDropdownItems(_ref2) {
        var excessMode = _ref2.excessMode,
            tabs = _ref2.tabs;

        if (excessMode !== 'dropdown') {
            return;
        }

        var wrapperWidth = this.wrapper.offsetWidth;
        var childNodes = this.nav.childNodes;

        var index = void 0;
        var total = tabs.length;
        var tabsWidth = 0;
        for (index = 0; index < total; index++) {
            tabsWidth += childNodes[index].offsetWidth;
            if (tabsWidth > wrapperWidth) {
                break;
            }
        }

        if (index > 1) {
            this.setState({
                dropdownTabs: tabs.slice(index)
            });
        }
    };

    Nav.prototype.renderTabList = function renderTabList(props) {
        var _this2 = this;

        var prefix = props.prefix,
            tabs = props.tabs,
            activeKey = props.activeKey,
            tabRender = props.tabRender;

        var tabTemplateFn = tabRender || this.defaultTabTemplateRender;

        var rst = [];
        _react2.default.Children.forEach(tabs, function (child) {
            var _classnames;

            var _child$props = child.props,
                disabled = _child$props.disabled,
                className = _child$props.className,
                onClick = _child$props.onClick,
                onMouseEnter = _child$props.onMouseEnter,
                onMouseLeave = _child$props.onMouseLeave,
                style = _child$props.style;
            /*eslint-disable eqeqeq*/

            var active = activeKey == child.key;
            var cls = (0, _classnames7.default)((_classnames = {}, _classnames[prefix + 'tabs-tab'] = true, _classnames.disabled = disabled, _classnames.active = active, _classnames), className);

            var events = {};

            if (!disabled) {
                events = {
                    onClick: _this2.onNavItemClick.bind(_this2, child.key, onClick),
                    onMouseEnter: _this2.onNavItemMouseEnter.bind(_this2, child.key, onMouseEnter),
                    onMouseLeave: _this2.onNavItemMouseLeave.bind(_this2, child.key, onMouseLeave)
                };
            }

            rst.push(_react2.default.createElement(
                'div',
                (0, _extends3.default)({
                    role: 'tab',
                    key: child.key,
                    ref: active ? _this2.activeTabRefHandler : null,
                    'aria-disabled': disabled ? 'true' : 'false',
                    'aria-selected': active ? 'true' : 'false',
                    className: cls,
                    style: style
                }, events),
                tabTemplateFn(child.key, child.props)
            ));
        });
        return rst;
    };

    Nav.prototype.onNavItemClick = function onNavItemClick(key, callback, e) {
        e.stopPropagation();
        this.props.onTriggerEvent(_utils.triggerEvents.CLICK, key);
        if (callback) {
            callback(key);
        }
    };

    Nav.prototype.onNavItemMouseEnter = function onNavItemMouseEnter(key, callback, e) {
        e.stopPropagation();
        this.props.onTriggerEvent(_utils.triggerEvents.HOVER, key);
        if (callback) {
            callback(key, e);
        }
    };

    Nav.prototype.onNavItemMouseLeave = function onNavItemMouseLeave(key, callback, e) {
        e.stopPropagation();
        if (callback) {
            callback(key, e);
        }
    };

    Nav.prototype.renderDropdownTabs = function renderDropdownTabs() {
        var tabs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (!tabs.length) {
            return null;
        }

        var _props = this.props,
            prefix = _props.prefix,
            activeKey = _props.activeKey,
            triggerType = _props.triggerType,
            popupProps = _props.popupProps;


        var trigger = _react2.default.createElement(
            'button',
            {
                className: prefix + 'tabs-btn-down' },
            _react2.default.createElement(_nextIcon2.default, { type: 'arrow-down' })
        );

        return _react2.default.createElement(
            Popup,
            (0, _extends3.default)({ triggerType: triggerType, trigger: trigger, container: function container(target) {
                    return target.parentNode;
                } }, popupProps),
            _react2.default.createElement(
                _nextMenu2.default,
                { selectedKeys: [activeKey], onSelect: this.onSelectMenuItem, selectMode: 'single' },
                tabs.map(function (tab) {
                    return _react2.default.createElement(
                        _nextMenu2.default.Item,
                        { key: tab.key },
                        tab.props.title
                    );
                })
            )
        );
    };

    Nav.prototype.render = function render() {
        var _classnames4, _classnames5;

        var _props2 = this.props,
            prefix = _props2.prefix,
            tabPosition = _props2.tabPosition,
            excessMode = _props2.excessMode,
            extra = _props2.extra,
            onKeyDown = _props2.onKeyDown,
            animation = _props2.animation,
            style = _props2.style,
            className = _props2.className;

        var state = this.state;

        var nextButton = void 0;
        var prevButton = void 0;
        var restButton = void 0;

        var showNextPrev = state.prev || state.next;

        if (excessMode === 'dropdown' && state.next && state.dropdownTabs.length) {
            restButton = this.renderDropdownTabs(state.dropdownTabs);
            prevButton = null;
            nextButton = null;
        } else if (showNextPrev) {
            var _classnames2, _classnames3;

            var prevBtnCls = (0, _classnames7.default)((_classnames2 = {}, _classnames2[prefix + 'tabs-btn-prev'] = 1, _classnames2.disabled = !state.prev, _classnames2));
            var nextBtnCls = (0, _classnames7.default)((_classnames3 = {}, _classnames3[prefix + 'tabs-btn-next'] = 1, _classnames3.disabled = !state.next, _classnames3));

            prevButton = _react2.default.createElement(
                'button',
                {
                    onClick: state.prev ? this.onPrevClick : noop,
                    className: prevBtnCls },
                _react2.default.createElement(_nextIcon2.default, { type: 'arrow-left' })
            );

            nextButton = _react2.default.createElement(
                'button',
                {
                    onClick: state.next ? this.onNextClick : noop,
                    className: nextBtnCls },
                _react2.default.createElement(_nextIcon2.default, { type: 'arrow-right' })
            );
            restButton = null;
        } else {
            nextButton = null;
            prevButton = null;
            restButton = null;
        }

        var containerCls = (0, _classnames7.default)((_classnames4 = {}, _classnames4[prefix + 'tabs-nav-container'] = true, _classnames4[prefix + 'tabs-nav-container-scrolling'] = showNextPrev, _classnames4));

        var navCls = prefix + 'tabs-nav';
        var tabList = this.renderTabList(this.props);

        var container = _react2.default.createElement(
            'div',
            { className: containerCls, key: 'nav-container' },
            _react2.default.createElement(
                'div',
                { className: prefix + 'tabs-nav-wrap', ref: this.wrapperRefHandler },
                _react2.default.createElement(
                    'div',
                    { className: prefix + 'tabs-nav-scroll' },
                    animation ? _react2.default.createElement(
                        _nextAnimate2.default,
                        { className: navCls, animation: navCls, singleMode: false, ref: this.navRefHandler },
                        tabList
                    ) : _react2.default.createElement(
                        'div',
                        { className: navCls, ref: this.navRefHandler },
                        tabList
                    )
                )
            ),
            prevButton,
            nextButton,
            restButton
        );

        var navChildren = [container];

        if (extra) {
            var extraProps = {
                className: prefix + 'tabs-nav-extra',
                key: 'nav-extra'
            };
            if (tabPosition === 'top' || tabPosition === 'bottom') {
                navChildren.unshift(_react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, extraProps, { style: floatRight }),
                    extra
                ));
            } else {
                navChildren.push(_react2.default.createElement(
                    'div',
                    extraProps,
                    extra
                ));
            }
        }

        var navbarCls = (0, _classnames7.default)((_classnames5 = {}, _classnames5[prefix + 'tabs-bar'] = true, _classnames5), className);

        return _react2.default.createElement(
            'div',
            { role: 'tablist', className: navbarCls, style: style, onKeyDown: onKeyDown, tabIndex: '0' },
            navChildren
        );
    };

    return Nav;
}(_react2.default.Component), _class.propTypes = {
    prefix: _propTypes2.default.string,
    animation: _propTypes2.default.bool,
    activeKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    excessMode: _propTypes2.default.string,
    extra: _propTypes2.default.any,
    tabs: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),
    tabPosition: _propTypes2.default.string,
    tabRender: _propTypes2.default.func,
    triggerType: _propTypes2.default.string,
    popupProps: _propTypes2.default.object,
    onTriggerEvent: _propTypes2.default.func,
    onKeyDown: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    style: _propTypes2.default.object,
    className: _propTypes2.default.string
}, _temp);
Nav.displayName = 'Nav';
exports.default = Nav;
module.exports = exports['default'];