'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _nextConfigProvider = require('../../next-config-provider/lib/index.js');

var _nextConfigProvider2 = _interopRequireDefault(_nextConfigProvider);

var _zhCn = require('../../next-locale/lib/zh-cn.js');

var _zhCn2 = _interopRequireDefault(_zhCn);

var _nextUtil = require('../../next-util/lib/index.js');

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _cardHeader = require('./head/card-header.js');

var _cardHeader2 = _interopRequireDefault(_cardHeader);

var _datePanelHeader = require('./head/date-panel-header.js');

var _datePanelHeader2 = _interopRequireDefault(_datePanelHeader);

var _monthPanelHeader = require('./head/month-panel-header.js');

var _monthPanelHeader2 = _interopRequireDefault(_monthPanelHeader);

var _yearPanelHeader = require('./head/year-panel-header.js');

var _yearPanelHeader2 = _interopRequireDefault(_yearPanelHeader);

var _dateTable = require('./table/date-table.js');

var _dateTable2 = _interopRequireDefault(_dateTable);

var _monthTable = require('./table/month-table.js');

var _monthTable2 = _interopRequireDefault(_monthTable);

var _yearTable = require('./table/year-table.js');

var _yearTable2 = _interopRequireDefault(_yearTable);

var _utils = require('./utils/index.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Calendar */
var Calendar = (_temp = _class = function (_Component) {
    (0, _inherits3.default)(Calendar, _Component);

    function Calendar(props, context) {
        (0, _classCallCheck3.default)(this, Calendar);

        var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props, context));

        _initialiseProps.call(_this);

        var value = (0, _utils.formatDateValue)(props.value || props.defaultValue);
        var visibleMonth = (0, _utils.getVisibleMonth)(props.defaultVisibleMonth, value);

        _this.state = {
            value: value,
            mode: props.mode,
            visibleMonth: visibleMonth
        };
        _this.today = (0, _moment2.default)();
        return _this;
    }

    Calendar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = (0, _utils.formatDateValue)(nextProps.value);
            this.setState({
                value: value
            });

            if (value) {
                this.setState({
                    visibleMonth: value
                });
            }
        }

        if ('mode' in nextProps) {
            this.setState({
                mode: nextProps.mode
            });
        }
    };

    /**
     * 根据日期偏移量设置当前展示的月份
     * @param {Number} offset 日期偏移的数量
     * @param {String} type 日期偏移的类型 days, months, years
     */
    Calendar.prototype.changeVisibleMonthByOffset = function changeVisibleMonthByOffset(offset, type) {
        var cloneValue = this.state.visibleMonth.clone();
        cloneValue.add(offset, type);
        this.changeVisibleMonth(cloneValue);
    };

    Calendar.prototype.render = function render() {
        var _classnames;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            shape = _props.shape,
            showOtherMonth = _props.showOtherMonth,
            locale = _props.locale,
            dateCellRender = _props.dateCellRender,
            monthCellRender = _props.monthCellRender,
            disabledDate = _props.disabledDate,
            onSelect = _props.onSelect,
            others = (0, _objectWithoutProperties3.default)(_props, ['prefix', 'className', 'shape', 'showOtherMonth', 'locale', 'dateCellRender', 'monthCellRender', 'disabledDate', 'onSelect']);

        var state = this.state;

        var classNames = (0, _classnames3.default)((_classnames = {}, _classnames[prefix + 'calendar'] = true, _classnames[prefix + 'calendar-' + shape] = shape, _classnames), className);

        var visibleMonth = state.visibleMonth;

        // reset moment locale
        if (locale.momentLocale) {
            state.value && state.value.locale(locale.momentLocale);
            visibleMonth.locale(locale.momentLocale);
        }

        var localeData = visibleMonth.localeData();

        var headerProps = {
            prefix: prefix,
            value: state.value,
            mode: state.mode,
            locale: locale,
            visibleMonth: visibleMonth,
            momentLocale: localeData,
            changeMode: this.changeMode,
            changeVisibleMonth: this.changeVisibleMonth,
            goNextDecade: this.goNextDecade,
            goNextYear: this.goNextYear,
            goNextMonth: this.goNextMonth,
            goPrevDecade: this.goPrevDecade,
            goPrevYear: this.goPrevYear,
            goPrevMonth: this.goPrevMonth
        };

        var tableProps = {
            prefix: prefix,
            visibleMonth: visibleMonth,
            showOtherMonth: showOtherMonth,
            value: state.value,
            mode: state.mode,
            locale: locale,
            dateCellRender: dateCellRender,
            monthCellRender: monthCellRender,
            disabledDate: disabledDate,
            momentLocale: localeData,
            today: this.today,
            onSelect: onSelect,
            changeMode: this.changeMode,
            changeVisibleMonth: this.changeVisibleMonth,
            goPrevDecade: this.goPrevDecade,
            goNextDecade: this.goNextDecade
        };

        var tables = {
            date: _react2.default.createElement(_dateTable2.default, tableProps),
            month: _react2.default.createElement(_monthTable2.default, tableProps),
            year: _react2.default.createElement(_yearTable2.default, tableProps)
        };

        var panelHeaders = {
            date: _react2.default.createElement(_datePanelHeader2.default, headerProps),
            month: _react2.default.createElement(_monthPanelHeader2.default, headerProps),
            year: _react2.default.createElement(_yearPanelHeader2.default, headerProps)
        };

        return _react2.default.createElement(
            'div',
            (0, _extends3.default)({}, _nextUtil.obj.pickOthers(Calendar.propTypes, others), { className: classNames }),
            shape === 'panel' ? panelHeaders[state.mode] : _react2.default.createElement(_cardHeader2.default, headerProps),
            tables[state.mode]
        );
    };

    return Calendar;
}(_react.Component), _class.propTypes = {
    prefix: _propTypes2.default.string,
    /**
     * 默认选中的日期（moment 对象）
     */
    defaultValue: _utils.checkMomentObj,
    /**
     * 选中的日期值 (moment 对象)
     */
    value: _utils.checkMomentObj,
    /**
     * 面板模式
     */
    mode: _propTypes2.default.oneOf(['date', 'month', 'year']),
    /**
     * 是否展示非本月的日期
     */
    showOtherMonth: _propTypes2.default.bool,
    /**
     * 默认展示的月份
     */
    defaultVisibleMonth: _propTypes2.default.func,
    /**
     * 展现形态
     */
    shape: _propTypes2.default.oneOf(['card', 'fullscreen', 'panel']),
    /**
     * 选择日期单元格时的回调
     * @param {Object} value 对应的日期值 (moment 对象)
     */
    onSelect: _propTypes2.default.func,
    /**
     * 自定义样式类
     */
    className: _propTypes2.default.string,
    /**
     * 自定义日期渲染函数
     * @param {Object} value 日期值（moment对象）
     * @returns {ReactNode}
     */
    dateCellRender: _propTypes2.default.func,
    /**
     * 自定义月份渲染函数
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {ReactNode}
     */
    monthCellRender: _propTypes2.default.func,
    /**
     * 不可选择的日期
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {Boolean}
     */
    disabledDate: _propTypes2.default.func,
    /**
     * 国际化配置
     */
    locale: _propTypes2.default.object
}, _class.defaultProps = {
    prefix: 'next-',
    shape: 'fullscreen',
    mode: 'date',
    onSelect: _nextUtil.func.noop,
    dateCellRender: function dateCellRender(value) {
        return value.date();
    },
    locale: _zhCn2.default.Calendar,
    showOtherMonth: true
}, _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.changeMode = function (mode) {
        if (mode !== _this2.state.mode) {
            _this2.setState({ mode: mode });
        }
    };

    this.changeVisibleMonth = function (date) {
        _this2.setState({ visibleMonth: date });
    };

    this.goPrevDecade = function () {
        _this2.changeVisibleMonthByOffset(-10, 'years');
    };

    this.goNextDecade = function () {
        _this2.changeVisibleMonthByOffset(10, 'years');
    };

    this.goPrevYear = function () {
        _this2.changeVisibleMonthByOffset(-1, 'years');
    };

    this.goNextYear = function () {
        _this2.changeVisibleMonthByOffset(1, 'years');
    };

    this.goPrevMonth = function () {
        _this2.changeVisibleMonthByOffset(-1, 'months');
    };

    this.goNextMonth = function () {
        _this2.changeVisibleMonthByOffset(1, 'months');
    };
}, _temp);
Calendar.displayName = 'Calendar';
exports.default = _nextConfigProvider2.default.config(Calendar);
module.exports = exports['default'];