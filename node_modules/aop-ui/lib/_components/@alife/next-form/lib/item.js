'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _nextGrid = require('../../next-grid/lib/index.js');

var _nextGrid2 = _interopRequireDefault(_nextGrid);

var _nextUtil = require('../../next-util/lib/index.js');

var _nextConfigProvider = require('../../next-config-provider/lib/index.js');

var _nextConfigProvider2 = _interopRequireDefault(_nextConfigProvider);

var _enhance = require('./enhance.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Row = _nextGrid2.default.Row,
    Col = _nextGrid2.default.Col;


function getPropTypes(key) {
    var _ref;

    return _ref = {}, _ref[key + 'Message'] = _propTypes2.default.string, _ref[key + 'Trigger'] = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array]), _ref;
}

/** Form.Item
 *  @description 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid
 */
var Item = (_temp = _class = function (_React$Component) {
    (0, _inherits3.default)(Item, _React$Component);

    function Item() {
        (0, _classCallCheck3.default)(this, Item);
        return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
    }

    /**
     * 从子元素里面提取表单组件
     */
    Item.prototype.getNames = function getNames() {
        var children = _react2.default.Children.toArray(this.props.children);
        return children.filter(function (c) {
            return c.props && ('name' in c.props || 'data-meta' in c.props);
        }).map(function (c) {
            return c.props.name || c.props.id;
        });
    };

    Item.prototype.getHelperMsg = function getHelperMsg() {
        var _formField = this.context._formField;
        var help = this.props.help;
        if (help === undefined && _formField) {
            var names = this.getNames();
            if (names.length) {
                var errors = _formField.getErrors(names);
                var errorArr = [];
                Object.keys(errors).forEach(function (key) {
                    if (errors[key]) {
                        errorArr.push(errors[key]);
                    }
                });
                return errorArr;
            }
            return '';
        }

        return help;
    };

    Item.prototype.getHelper = function getHelper() {
        var prefix = this.props.prefix;
        var help = this.getHelperMsg();

        return help ? _react2.default.createElement(
            'div',
            { className: help ? prefix + 'form-item-help' : '', key: 'help' },
            help
        ) : null;
    };

    Item.prototype.getState = function getState() {
        var validateState = this.props.validateState;

        if (validateState) {
            return validateState;
        }

        var getState = this.context._formField.getState;

        var names = this.getNames();
        if (!names.length) {
            return '';
        }

        return getState(names[0]);
    };

    Item.prototype.getSize = function getSize() {
        return this.props.size || this.context._formSize;
    };

    Item.prototype.getItemLabel = function getItemLabel() {
        var _classNames;

        var _props = this.props,
            id = _props.id,
            required = _props.required,
            asterisk = _props.asterisk,
            label = _props.label,
            labelCol = _props.labelCol,
            wrapperCol = _props.wrapperCol,
            prefix = _props.prefix,
            labelAlign = _props.labelAlign,
            labelTextAlign = _props.labelTextAlign;


        if (!label) {
            return null;
        }

        var ele = _react2.default.createElement(
            'label',
            { htmlFor: id || this.getNames()[0], required: required && asterisk, key: 'label' },
            label
        );

        var cls = (0, _classnames2.default)((_classNames = {}, _classNames[prefix + 'form-item-label'] = true, _classNames[prefix + 'left'] = labelTextAlign === 'left', _classNames));

        if ((wrapperCol || labelCol) && labelAlign !== 'top') {
            return _react2.default.createElement(
                Col,
                (0, _extends3.default)({}, labelCol, { className: cls }),
                ele
            );
        }

        return _react2.default.createElement(
            'div',
            { className: cls },
            ele
        );
    };

    Item.prototype.getItemWrapper = function getItemWrapper() {
        var _this2 = this;

        var _props2 = this.props,
            hasFeedback = _props2.hasFeedback,
            labelCol = _props2.labelCol,
            wrapperCol = _props2.wrapperCol,
            children = _props2.children,
            extra = _props2.extra,
            labelAlign = _props2.labelAlign,
            prefix = _props2.prefix;


        var state = this.getState();

        var childrenProps = { size: this.getSize() };
        if (state && (state === 'error' || hasFeedback)) {
            childrenProps.state = state;
        }

        if (labelAlign === 'inset') {
            childrenProps.label = this.getItemLabel();
        }

        var ele = _react2.default.Children.map(children, function (child) {
            if (child && typeof child.type === 'function') {
                var extraProps = childrenProps;
                if ('name' in child.props && !('data-meta' in child.props)) {
                    extraProps = _this2.context._formField.init(child.props.name, (0, _extends3.default)({}, (0, _enhance.getFieldInitCfg)(_this2.props, child.type.displayName), {
                        props: child.props
                    }), childrenProps);
                }
                return _react2.default.cloneElement(child, extraProps);
            }
            return child;
        });

        var help = this.getHelper();

        if ((wrapperCol || labelCol) && labelAlign !== 'top') {
            return _react2.default.createElement(
                Col,
                (0, _extends3.default)({}, wrapperCol, { className: prefix + 'form-item-control', key: 'item' }),
                ele,
                ' ',
                help,
                ' ',
                extra
            );
        }

        return _react2.default.createElement(
            'div',
            { className: prefix + 'form-item-control' },
            ele,
            ' ',
            help,
            ' ',
            extra
        );
    };

    Item.prototype.render = function render() {
        var _classNames2;

        var _props3 = this.props,
            className = _props3.className,
            labelAlign = _props3.labelAlign,
            style = _props3.style,
            prefix = _props3.prefix,
            wrapperCol = _props3.wrapperCol,
            labelCol = _props3.labelCol;

        var state = this.getState();
        var size = this.getSize();

        var itemClassName = (0, _classnames2.default)((_classNames2 = {}, _classNames2[prefix + 'form-item'] = true, _classNames2['' + prefix + labelAlign] = labelAlign, _classNames2['has-' + state] = !!state, _classNames2['' + prefix + size] = !!size, _classNames2['' + className] = !!className, _classNames2));

        // 垂直模式并且左对齐才用到
        var Tag = (wrapperCol || labelCol) && labelAlign !== 'top' ? Row : 'div';
        var label = labelAlign === 'inset' ? null : this.getItemLabel();

        return _react2.default.createElement(
            Tag,
            (0, _extends3.default)({}, _nextUtil.obj.pickOthers(Item.propTypes, this.props), { className: itemClassName, style: style }),
            label,
            this.getItemWrapper()
        );
    };

    return Item;
}(_react2.default.Component), _class.propTypes = (0, _extends3.default)({
    /**
     * 样式前缀
     */
    prefix: _propTypes2.default.string,
    /**
     * label 标签的文本
     */
    label: _propTypes2.default.node,
    /**
     * label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效
     */
    labelCol: _propTypes2.default.object,
    /**
     * 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol
     */
    wrapperCol: _propTypes2.default.object,
    /**
     * 自定义提示信息，如不设置，则会根据校验规则自动生成.
     */
    help: _propTypes2.default.node,
    /**
     * 校验状态，如不设置，则会根据校验规则自动生成
     * @enumdesc , 成功, 失败, 校验中
     */
    validateState: _propTypes2.default.oneOf(['error', 'success', 'loading']),
    /**
     * 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持
     */
    hasFeedback: _propTypes2.default.bool, //TODO: hasFeedback => validateStatus=[error,success,loading]
    /**
     * 自定义内联样式
     */
    style: _propTypes2.default.object,
    id: _propTypes2.default.string,
    children: _propTypes2.default.node,
    /**
     * 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面
     */
    extra: _propTypes2.default.node,
    /**
     * 单个Item的size自定义，优先级高于Form的size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。
     */
    size: _propTypes2.default.oneOf(['large', 'small', 'medium']),
    /**
     * 标签的位置
     * @enumdesc 上, 左, 内
     */
    labelAlign: _propTypes2.default.oneOf(['top', 'left', 'inset']),
    /**
     * 标签的左右对齐方式
     * @enumdesc 左, 右
     */
    labelTextAlign: _propTypes2.default.oneOf(['left', 'right']),
    /**
     * 扩展class
     */
    className: _propTypes2.default.string,
    /**
     * required 星号
     */
    asterisk: _propTypes2.default.bool,
    required: _propTypes2.default.bool
}, getPropTypes('required'), {
    min: _propTypes2.default.number
}, getPropTypes('min'), {
    max: _propTypes2.default.number
}, getPropTypes('max'), {
    minLength: _propTypes2.default.number
}, getPropTypes('minLength'), {
    maxLength: _propTypes2.default.number
}, getPropTypes('maxLength'), {
    length: _propTypes2.default.number
}, getPropTypes('length'), {
    format: _propTypes2.default.oneOf(['number', 'email', 'url', 'tel'])
}, getPropTypes('format'), {
    validator: _propTypes2.default.func
}), _class.defaultProps = {
    prefix: 'next-',
    hasFeedback: false,
    asterisk: true
}, _class.contextTypes = {
    _formField: _propTypes2.default.object,
    _formSize: _propTypes2.default.oneOf(['large', 'small', 'medium'])
}, _class._typeMark = 'form_item', _temp);
Item.displayName = 'Item';
exports.default = _nextConfigProvider2.default.config(Item);
module.exports = exports['default'];