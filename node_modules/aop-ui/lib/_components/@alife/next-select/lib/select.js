'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _nextUtil = require('../../next-util/lib/index.js');

var _nextTag = require('../../next-tag/lib/index.js');

var _nextTag2 = _interopRequireDefault(_nextTag);

var _nextInput = require('../../next-input/lib/index.js');

var _nextInput2 = _interopRequireDefault(_nextInput);

var _nextConfigProvider = require('../../next-config-provider/lib/index.js');

var _nextConfigProvider2 = _interopRequireDefault(_nextConfigProvider);

var _base = require('./base.js');

var _base2 = _interopRequireDefault(_base);

var _util = require('./util.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bindCtx = _nextUtil.func.bindCtx,
    noop = _nextUtil.func.noop;

var isIE9 = _nextUtil.env.ieVersion === 9;

// 自定义弹层：1. 不需要关心Menu的点击事件 2. 不需要关心dataSource变化

/**
 * Select
 */
var Select = (_temp = _class = function (_Base) {
    (0, _inherits3.default)(Select, _Base);

    function Select(props) {
        (0, _classCallCheck3.default)(this, Select);

        // @extend Base state
        var _this = (0, _possibleConstructorReturn3.default)(this, _Base.call(this, props));

        _this.handleWrapClick = function (e) {
            e.preventDefault();
            _this.focusInput();
        };

        (0, _extends3.default)(_this.state, {
            // 搜索的关键字
            searchValue: 'searchValue' in props ? props.searchValue : '',
            searchFocus: false
        });

        // For cache chosen value
        _this.valueDataSource = {
            valueDS: [],
            mapValueDS: {}
        };

        bindCtx(_this, ['handleMenuSelect', 'handleItemClick', 'handleSearch', 'handleSearchKeyDown', 'handleSelectAll', 'handleSearchFocus', 'handleSearchBlur']);
        return _this;
    }

    Select.prototype.componentWillMount = function componentWillMount() {
        this.dataStore.setOptions({
            key: this.state.searchValue,
            addonKey: this.props.mode === 'tag' // tag 模式手动输入的数据
        });

        _Base.prototype.componentWillMount.call(this);

        // 根据value和计算后的dataSource，更新value对应的valueDataSource
        if (!this.useDetailValue() && typeof this.state.value !== 'undefined') {
            this.valueDataSource = (0, _util.getValueDataSource)(this.state.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        }

        if (isIE9) {
            this.ie9Hack();
        }
    };

    Select.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('searchValue' in nextProps) {
            this.dataStore.setOptions({ key: nextProps.searchValue });
            this.setState({
                searchValue: typeof nextProps.searchValue === 'undefined' ? '' : nextProps.searchValue
            });
        }
        if (this.props.mode !== nextProps.mode) {
            this.dataStore.setOptions({
                addonKey: nextProps.mode === 'tag'
            });
        }

        _Base.prototype.componentWillReceiveProps.call(this, nextProps);

        if (!this.useDetailValue() && 'value' in nextProps) {
            // 更新valueDataSource值
            this.valueDataSource = (0, _util.getValueDataSource)(nextProps.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        }
    };

    Select.prototype.componentDidMount = function componentDidMount() {
        if (isIE9) {
            this.ie9Hack();
        }
        _Base.prototype.componentDidMount.call(this);
    };

    // ie9 下 table-cell 布局不支持宽度超出隐藏


    Select.prototype.ie9Hack = function ie9Hack() {
        try {
            var width = this.selectDOM.currentStyle.width;
            this.setState({
                fixWidth: width !== 'auto'
            });
        } catch (e) {
            //
        }
    };

    Select.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        var props = this.props;
        // 随着输入自动伸展
        if (/tag|multiple/.test(props.mode) && prevState.searchValue !== this.state.searchValue) {
            this.syncWidth();
        } else {
            return _Base.prototype.componentDidUpdate.call(this, prevProps, prevState);
        }
    };

    Select.prototype.useDetailValue = function useDetailValue() {
        var _props = this.props,
            popupContent = _props.popupContent,
            useDetailValue = _props.useDetailValue;

        return popupContent || useDetailValue;
    };

    Select.prototype.hasSearch = function hasSearch() {
        var _props2 = this.props,
            showSearch = _props2.showSearch,
            mode = _props2.mode;

        return showSearch || mode === 'tag';
    };

    /**
     * Menu.Item onSelect
     * @private
     * @param  {Array<string>} keys
     */


    Select.prototype.handleMenuSelect = function handleMenuSelect(keys) {
        var _props3 = this.props,
            mode = _props3.mode,
            readOnly = _props3.readOnly,
            disabled = _props3.disabled;


        if (readOnly || disabled) {
            return false;
        }

        var isSingle = mode === 'single';

        if (isSingle) {
            // 单选
            return this.handleSingleSelect(keys[0], 'itemClick');
        } else {
            // 正常多选

            return this.handleMultipleSelect(keys, 'itemClick');
        }
    };

    Select.prototype.handleItemClick = function handleItemClick() {
        this.focusInput();

        // 单选模式点击的时候触发弹层关闭
        if (this.props.mode === 'single') {
            this.setVisible(false, 'itemClick');
        }
    };

    /**
     * 单选模式
     */


    Select.prototype.handleSingleSelect = function handleSingleSelect(key, triggerType) {
        var itemObj = (0, _util.getValueDataSource)(key, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());

        var cacheValue = this.props.cacheValue;

        // 清空搜索

        if (!('searchValue' in this.props) && this.state.searchValue) {
            this.handleSearch('');
        }

        // 非受控更新缓存map
        if (cacheValue && !('value' in this.props)) {
            this.valueDataSource = itemObj;
        }

        this.setVisible(false, triggerType);

        if (this.useDetailValue()) {
            return this.handleChange(itemObj.valueDS, triggerType);
        } else {
            this.handleChange(itemObj.value, triggerType);
        }
    };

    /**
     * 多选模式 multiple/tag
     */


    Select.prototype.handleMultipleSelect = function handleMultipleSelect(keys, triggerType) {
        var itemObj = (0, _util.getValueDataSource)(keys, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());

        var _props4 = this.props,
            cacheValue = _props4.cacheValue,
            mode = _props4.mode;

        // 非受控更新缓存map

        if (cacheValue || mode === 'tag') {
            this.valueDataSource = itemObj;
        }

        // 清空搜索
        if (!('searchValue' in this.props) && this.state.searchValue) {
            this.handleSearch('');
        }

        if (this.useDetailValue()) {
            this.handleChange(itemObj.valueDS, triggerType);
        } else {
            this.handleChange(itemObj.value, triggerType);
        }
    };

    /**
     * Handle search input change event
     * @param {Event} e change Event
     */


    Select.prototype.handleSearch = function handleSearch(value) {
        if (this.state.searchValue === value) {
            return;
        }

        var _props5 = this.props,
            filterLocal = _props5.filterLocal,
            onSearch = _props5.onSearch;


        if (filterLocal) {
            if (!('searchValue' in this.props)) {
                this.setState({
                    searchValue: value,
                    dataSource: this.dataStore.updateByKey(value)
                });
                this.setFirstHightLightKeyForMenu();
            }
        } else if (!('searchValue' in this.props)) {
            this.setState({
                searchValue: value
            });
        }

        onSearch(value);
    };

    Select.prototype.handleSearchFocus = function handleSearchFocus() {
        this.setState({ searchFocus: true });
    };

    Select.prototype.handleSearchBlur = function handleSearchBlur(e) {
        this.setState({ searchFocus: false });
        this.props.onBlur(e);
    };

    // 搜索框 keyDown 事件


    Select.prototype.handleSearchKeyDown = function handleSearchKeyDown(e) {
        if (this.props.popupContent) {
            return this.props.onKeyDown(e);
        }

        var proxy = 'search';
        var _props6 = this.props,
            showSearch = _props6.showSearch,
            mode = _props6.mode;

        var hasSearch = this.hasSearch();

        switch (e.keyCode) {
            case _nextUtil.KEYCODE.UP:
                e.preventDefault();
                this.toggleHighlightItem(-1, e);
                break;
            case _nextUtil.KEYCODE.DOWN:
                e.preventDefault();
                this.toggleHighlightItem(1, e);
                break;
            case _nextUtil.KEYCODE.ENTER:
                e.preventDefault();
                this.chooseHighlightItem(proxy, e);
                break;
            case _nextUtil.KEYCODE.ESC:
                e.preventDefault();
                this.state.visible && this.setVisible(false, 'keyDown');
                break;
            case _nextUtil.KEYCODE.SPACE:
                e.stopPropagation();
                !hasSearch && e.preventDefault();
                break;
            case _nextUtil.KEYCODE.BACKSPACE:
                // 在多选并且有搜索的情况下，删除最后一个 tag
                if (mode === 'multiple' && showSearch || mode === 'tag') {
                    this.handleDeleteTag(e);
                }
                break;
            default:
                break;
        }

        this.props.onKeyDown(e);
    };

    // 回车 选择高亮的 item


    Select.prototype.chooseHighlightItem = function chooseHighlightItem(proxy, e) {
        var prevVisible = this.state.visible;
        if (!prevVisible) {
            return false;
        }

        var highlightKey = this.state.highlightKey;
        var mode = this.props.mode;


        if (mode === 'single') {
            this.handleSingleSelect(highlightKey, 'enter');
        } else {
            var value = this.state.value || [];
            var keys = value.map(function (v) {
                return '' + v;
            }); // clone value
            var index = keys.map(function (v) {
                return '' + v;
            }).indexOf(highlightKey);
            if (index > -1) {
                // 反选
                keys.splice(index, 1);
            } else {
                // 勾选
                keys.push(highlightKey);
            }
            this.handleMultipleSelect(keys, 'enter');
            // 阻止事件冒泡到最外层，让Popup 监听到触发弹层关闭
            e && e.stopPropagation();
        }
    };

    /**
     * Handle Tag close event
     * @param  {Object} item
     * @return {Boolean} false  return false to prevent auto close
     * ----
     * It MUST be multiple mode, needn't additional judgement
     */


    Select.prototype.handleTagClose = function handleTagClose(item) {

        if (this.useDetailValue()) {
            var value = this.state.value.filter(function (v) {
                return item.value !== v.value;
            });

            this.handleChange(value, 'tag');
        } else {
            // filter out current item, and then call handleMenuSelect
            var _value = this.state.value.filter(function (v) {
                return item.value !== v;
            });

            this.handleMultipleSelect(_value, 'tag');
        }

        this.props.onRemove(item);

        // prevent tag close
        return false;
    };

    /**
     * Handle BACKSPACE key event
     * @param {Event} e keyDown event
     * ---
     * It MUST be multiple mode
     */


    Select.prototype.handleDeleteTag = function handleDeleteTag(e) {
        var value = this.state.value;
        var searchValue = this.state.searchValue;

        if (searchValue || !value || !value.length) {
            return false;
        }

        e.preventDefault();

        var nextValues = value.slice(0, value.length - 1);
        // 手动调用 handleMenuSelect 时直接传入原生的 value，可以减少 toString 的操作

        if (this.useDetailValue()) {
            this.handleChange(nextValues, 'tag');
        } else {
            this.handleMultipleSelect(nextValues, 'tag');
        }
    };

    /**
     * Handle SelectAll span click event
     * @param {Event} e click event
     */


    Select.prototype.handleSelectAll = function handleSelectAll(e) {
        e && e.preventDefault();
        var nextValues = this.dataStore.getEnableDS().map(function (item) {
            return item.value;
        });
        // 直接传 values，减少 toString 操作
        this.handleMultipleSelect(nextValues, 'selectAll');
    };

    Select.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {
        this.setVisible(visible, type);
    };

    Select.prototype.afterClose = function afterClose() {
        if (this.hasSearch()) {
            this.handleSearch('');
        }
    };

    /**
     * 如果用户是自定义的弹层，则直接以 value 为准，不再校验 dataSource
     * @param {object} props
     */


    Select.prototype.renderValues = function renderValues() {
        var _this2 = this;

        var _props7 = this.props,
            mode = _props7.mode,
            size = _props7.size,
            valueRender = _props7.valueRender,
            fillProps = _props7.fillProps,
            disabled = _props7.disabled;

        var value = this.state.value;

        if ((0, _util.isNull)(value)) {
            return null;
        }

        if (!this.useDetailValue()) {
            value = this.valueDataSource.valueDS;
        }

        if (mode === 'single') {
            if (!value) {
                return null;
            }
            return fillProps ? value[fillProps] : valueRender(value);
        } else if (value && value.length) {
            return value.map(function (v) {
                if (!v) {
                    return null;
                }
                var labelNode = fillProps ? v[fillProps] : valueRender(v);
                return _react2.default.createElement(
                    _nextTag2.default,
                    { key: v.value,
                        disabled: disabled || v.disabled,
                        type: 'primary',
                        size: size === 'large' ? 'medium' : 'small',
                        animation: false,
                        onClose: _this2.handleTagClose.bind(_this2, v),
                        closable: true },
                    labelNode
                );
            });
        }

        return null;
    };

    /**
     * 选择器
     * @override
     * @param {object} props
     */
    Select.prototype.renderSelect = function renderSelect() {
        var _this3 = this,
            _classNames;

        var _props8 = this.props,
            prefix = _props8.prefix,
            showSearch = _props8.showSearch,
            placeholder = _props8.placeholder,
            mode = _props8.mode,
            size = _props8.size,
            className = _props8.className,
            style = _props8.style,
            readOnly = _props8.readOnly,
            disabled = _props8.disabled,
            hasBorder = _props8.hasBorder,
            label = _props8.label,
            locale = _props8.locale,
            hasClear = _props8.hasClear;

        var others = _nextUtil.obj.pickOthers(Select.propTypes, this.props);
        var othersData = _nextUtil.obj.pickAttrsWith(others, 'data-');

        var visible = this.state.visible;
        var isSingle = mode === 'single';
        var hasSearch = this.hasSearch();
        var valueNodes = this.renderValues();

        // 将当前的值作为 placeholder，这个功能的前提是 valueNode 必须是一个字符串
        var _placeholder = placeholder || locale.selectPlaceHolder;
        if (showSearch && visible && isSingle && typeof valueNodes === 'string') {
            _placeholder = valueNodes;
        }
        // 多选、有值的时候不显示 placeholder
        if (!isSingle && valueNodes) {
            _placeholder = null;
        }

        // 下拉箭头
        var extra = this.renderArrowNode(this.props, function () {
            _this3.focusInput();
            _this3.setVisible(!_this3.state.visible);
        });

        var triggerClazz = (0, _classnames2.default)([prefix + 'select', prefix + 'select-trigger', prefix + 'select-' + mode, '' + prefix + size, className], (_classNames = {}, _classNames[prefix + 'active'] = visible, _classNames[prefix + 'inactive'] = !visible, _classNames[prefix + 'no-search'] = !hasSearch, _classNames[prefix + 'has-search'] = hasSearch, _classNames[prefix + 'select-in-ie'] = isIE9, _classNames[prefix + 'select-in-ie-fixwidth'] = this.state.fixWidth, _classNames));

        return _react2.default.createElement(
            'span',
            (0, _extends3.default)({}, othersData, { className: triggerClazz, style: style, ref: this.saveSelectRef, onClick: this.handleWrapClick }),
            _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, _nextUtil.obj.pickOthers(othersData, others), {
                label: label,
                extra: extra,
                value: this.state.searchValue,
                size: size,
                readOnly: !this.hasSearch() || readOnly,
                disabled: disabled,
                placeholder: _placeholder,
                hasBorder: hasBorder,
                hasClear: hasClear,
                htmlSize: '1',
                inputRender: function inputRender(inputEl) {
                    return _this3.renderSearchInput(valueNodes, _placeholder, inputEl);
                },
                onChange: this.handleSearch,
                onKeyDown: this.handleSearchKeyDown,
                onFocus: this.handleSearchFocus,
                onBlur: this.handleSearchBlur,
                className: prefix + 'select-inner',
                ref: this.saveInputRef }))
        );
    };

    Select.prototype.renderSearchInput = function renderSearchInput(valueNodes, placeholder, inputEl) {
        var _classNames2;

        var _props9 = this.props,
            prefix = _props9.prefix,
            mode = _props9.mode;

        var isSingle = mode === 'single';

        var mirrorText = this.state.searchValue;

        var cls = (0, _classnames2.default)((_classNames2 = {}, _classNames2[prefix + 'select-values'] = true, _classNames2[prefix + 'input-text-field'] = true, _classNames2));

        return _react2.default.createElement(
            'span',
            { className: cls },
            isSingle && valueNodes ? _react2.default.createElement(
                'em',
                null,
                valueNodes
            ) : valueNodes,
            _react2.default.createElement(
                'span',
                { className: prefix + 'select-trigger-search' },
                inputEl,
                _react2.default.createElement(
                    'span',
                    null,
                    mirrorText || placeholder,
                    '\xA0'
                )
            )
        );
    };

    /**
     * 渲染弹层的 header 内容
     * @override
     * @param {object} props
     */


    Select.prototype.renderMenuHeader = function renderMenuHeader() {
        var _props10 = this.props,
            prefix = _props10.prefix,
            hasSelectAll = _props10.hasSelectAll,
            mode = _props10.mode;


        var sourceCount = this.dataStore.getEnableDS().length;
        // 多选模式下才有全选
        if (!hasSelectAll || mode === 'single' || !sourceCount) {
            return null;
        }

        var text = typeof hasSelectAll === 'boolean' ? 'Select All' : hasSelectAll;

        return _react2.default.createElement(
            'div',
            { key: 'all', onClick: this.handleSelectAll, className: prefix + 'select-all' },
            _react2.default.createElement(
                'span',
                null,
                text
            )
        );
    };

    Select.prototype.render = function render() {
        var _props11 = this.props,
            showSearch = _props11.showSearch,
            mode = _props11.mode;

        var props = (0, _extends3.default)({}, this.props);
        if (showSearch || mode === 'tag') {
            props.canCloseByTrigger = false;
        }
        if (mode === 'single') {
            props.cache = true;
        }
        return _Base.prototype.render.call(this, props);
    };

    return Select;
}(_base2.default), _class.propTypes = (0, _extends3.default)({}, _base2.default.propTypes, {
    /**
     * 选择器模式
     */
    mode: _propTypes2.default.oneOf(['single', 'multiple', 'tag']),
    /**
     * 当前值，用于受控模式
     */
    value: _propTypes2.default.any,
    /**
     * 初始的默认值
     */
    defaultValue: _propTypes2.default.any,
    /**
     * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)
     */
    dataSource: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.shape({
        value: _propTypes2.default.any,
        label: _propTypes2.default.any,
        disabled: _propTypes2.default.bool,
        children: _propTypes2.default.array
    }), _propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string])),
    /**
     * 是否有边框
     */
    hasBorder: _propTypes2.default.bool,
    /**
     * 展开后是否能搜索（tag 模式下固定为true）
     */
    showSearch: _propTypes2.default.bool,
    /**
     * 当搜索框值变化时回调
     * @param {String} value 数据
     */
    onSearch: _propTypes2.default.func,
    /**
     * 多选模式下是否有全选功能
     */
    hasSelectAll: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
    /**
     * 填充到选择框里的值的 key
     */
    fillProps: _propTypes2.default.string,
    /**
     * onChange返回的value使用dataSource的对象
     */
    useDetailValue: _propTypes2.default.bool,
    /**
     * dataSource变化的时是否保留已选的内容
     */
    cacheValue: _propTypes2.default.bool,
    /**
     * 渲染 Select 展现内容的方法
     * @param {Object} item 渲染节点的item
     * @return {ReacNode} 展现内容
     * @default item => item.label \|\| item.value
     */
    valueRender: _propTypes2.default.func,
    /**
     * 渲染 MenuItem 内容的方法
     * @param {Object} item 渲染节点的item
     * @param {String} searchValue 搜索关键字（如果开启搜索）
     * @return {ReacNode} item node
     */
    itemRender: _propTypes2.default.func,
    /**
     * 弹层内容为空的文案
     */
    noFoundContent: _propTypes2.default.node,
    style: _propTypes2.default.object,
    /**
     * 受控搜索值，一般不需要设置
     * @type {[type]}
     */
    searchValue: _propTypes2.default.string,
    /**
     * tag 删除回调
     * @param {object} item 渲染节点的item
     */
    onRemove: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    onBlur: _propTypes2.default.func,
    onKeyDown: _propTypes2.default.func
}), _class.defaultProps = (0, _extends3.default)({}, _base2.default.defaultProps, {
    mode: 'single',
    showSearch: false,
    cacheValue: true,
    onSearch: noop,
    hasArrow: true,
    onRemove: noop,
    valueRender: function valueRender(item) {
        return item.label || item.value;
    },
    onKeyDown: noop,
    onFocus: noop,
    onBlur: noop
}), _class.displayName = 'Select', _temp);
exports.default = _nextConfigProvider2.default.config(Select);
module.exports = exports['default'];