'use strict';

exports.__esModule = true;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames4 = require('classnames');

var _classnames5 = _interopRequireDefault(_classnames4);

var _nextConfigProvider = require('../../next-config-provider/lib/index.js');

var _nextConfigProvider2 = _interopRequireDefault(_nextConfigProvider);

var _nextOverlay = require('../../next-overlay/lib/index.js');

var _nextOverlay2 = _interopRequireDefault(_nextOverlay);

var _nextInput = require('../../next-input/lib/index.js');

var _nextInput2 = _interopRequireDefault(_nextInput);

var _nextCalendar = require('../../next-calendar/lib/index.js');

var _nextCalendar2 = _interopRequireDefault(_nextCalendar);

var _panel = require('../../next-time-picker/lib/panel.js');

var _panel2 = _interopRequireDefault(_panel);

var _utils = require('../../next-calendar/lib/utils/index.js');

var _zhCn = require('../../next-locale/lib/zh-cn.js');

var _zhCn2 = _interopRequireDefault(_zhCn);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _nextUtil = require('../../next-util/lib/index.js');

var _util = require('./util/index.js');

var _panelFooter = require('./module/panel-footer.js');

var _panelFooter2 = _interopRequireDefault(_panelFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Popup = _nextOverlay2.default.Popup;

/**
 * DatePicker
 */

var DatePicker = (_temp = _class = function (_Component) {
    (0, _inherits3.default)(DatePicker, _Component);

    function DatePicker(props, context) {
        (0, _classCallCheck3.default)(this, DatePicker);

        var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props, context));

        _initialiseProps.call(_this);

        var value = (0, _utils.formatDateValue)(props.value || props.defaultValue);
        _this.state = {
            value: value,
            dateInputStr: '',
            timeInputStr: '',
            inputing: false, // 当前是否处于输入状态
            visible: props.visible || props.defaultVisible,
            panel: _util.PANEL.DATE
        };
        return _this;
    }

    DatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = (0, _utils.formatDateValue)(nextProps.value);
            this.setState({
                value: value
            });
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    DatePicker.prototype.render = function render() {
        var _classnames, _classnames2, _classnames3, _PANEL$DATE$PANEL$TIM;

        var _props = this.props,
            prefix = _props.prefix,
            locale = _props.locale,
            label = _props.label,
            state = _props.state,
            format = _props.format,
            defaultVisibleMonth = _props.defaultVisibleMonth,
            showTime = _props.showTime,
            disabledDate = _props.disabledDate,
            footerRender = _props.footerRender,
            placeholder = _props.placeholder,
            size = _props.size,
            disabled = _props.disabled,
            hasClear = _props.hasClear,
            popupTriggerType = _props.popupTriggerType,
            popupAlign = _props.popupAlign,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            className = _props.className,
            others = (0, _objectWithoutProperties3.default)(_props, ['prefix', 'locale', 'label', 'state', 'format', 'defaultVisibleMonth', 'showTime', 'disabledDate', 'footerRender', 'placeholder', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className']);
        var _state = this.state,
            visible = _state.visible,
            value = _state.value,
            dateInputStr = _state.dateInputStr,
            timeInputStr = _state.timeInputStr,
            panel = _state.panel,
            inputing = _state.inputing;


        var datePickerCls = (0, _classnames5.default)((_classnames = {}, _classnames[prefix + 'date-picker'] = true, _classnames), className);

        var triggerInputCls = (0, _classnames5.default)((_classnames2 = {}, _classnames2[prefix + 'date-picker-input'] = true, _classnames2[prefix + 'error'] = false, _classnames2));

        var panelBodyClassName = (0, _classnames5.default)((_classnames3 = {}, _classnames3[prefix + 'date-picker-body'] = true, _classnames3[prefix + 'date-picker-body-show-time'] = showTime, _classnames3));

        var panelInputCls = prefix + 'date-picker-panel-input';

        var sharedInputProps = {
            size: size,
            disabled: disabled,
            onChange: this.onDateInputChange,
            onBlur: this.onDateInputBlur,
            onPressEnter: this.onDateInputBlur
        };

        var dateInputValue = inputing === 'date' ? dateInputStr : value && value.format(format) || '';
        var triggerInputValue = dateInputValue;

        var dateInput = _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedInputProps, {
            value: dateInputValue,
            onFocus: this.onFoucsDateInput,
            placeholder: format,
            className: panelInputCls }));

        var datePanel = _react2.default.createElement(_nextCalendar2.default, {
            shape: 'panel',
            value: value,
            onSelect: this.onSelectCalendarPanel,
            defaultVisibleMonth: defaultVisibleMonth,
            disabledDate: disabledDate });

        var panelFooter = footerRender();

        var timeInput = null;
        var timePanel = null;

        if (showTime) {
            var timeFormat = showTime.format || _util.DEFAULT_TIME_FORMAT;
            var datetimeFormat = format + ' ' + timeFormat;

            var timeInputValue = inputing === 'time' ? timeInputStr : value && value.format(timeFormat) || '';
            triggerInputValue = value && value.format(datetimeFormat) || '';

            var timePanelProps = (typeof showTime === 'undefined' ? 'undefined' : (0, _typeof3.default)(showTime)) === 'object' ? showTime : {};
            var showSecond = timeFormat.indexOf('s') > -1;

            timeInput = _react2.default.createElement(_nextInput2.default, {
                placeholder: timeFormat,
                value: timeInputValue,
                size: size,
                disabled: disabled || !value,
                onChange: this.onTimeInputChange,
                onFocus: this.onFoucsTimeInput,
                onBlur: this.onTimeInputBlur,
                onPressEnter: this.onTimeInputBlur,
                className: panelInputCls });

            timePanel = _react2.default.createElement(_panel2.default, (0, _extends3.default)({}, timePanelProps, {
                className: prefix + 'date-picker-panel-time',
                showSecond: showSecond,
                disabled: disabled,
                prefix: prefix,
                value: value,
                onSelect: this.onSelectTimePanel }));

            panelFooter = panelFooter || _react2.default.createElement(_panelFooter2.default, {
                prefix: prefix,
                locale: locale,
                value: value,
                panel: panel,
                onPanelChange: this.changePanel,
                onOk: this.onOk });
        }

        var panelBody = (_PANEL$DATE$PANEL$TIM = {}, _PANEL$DATE$PANEL$TIM[_util.PANEL.DATE] = datePanel, _PANEL$DATE$PANEL$TIM[_util.PANEL.TIME] = timePanel, _PANEL$DATE$PANEL$TIM)[panel];

        var allowClear = value && hasClear;
        var trigger = _react2.default.createElement(
            'div',
            { className: prefix + 'date-picker-trigger' },
            _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedInputProps, {
                label: label,
                state: state,
                value: triggerInputValue,
                placeholder: placeholder || locale.placeholder,
                hint: 'calendar',
                hasClear: allowClear,
                className: triggerInputCls }))
        );

        return _react2.default.createElement(
            'div',
            (0, _extends3.default)({}, _nextUtil.obj.pickOthers(DatePicker.propTypes, others), { className: datePickerCls }),
            _react2.default.createElement(
                Popup,
                (0, _extends3.default)({}, popupProps, {
                    autoFocus: true,
                    disabled: disabled,
                    visible: visible,
                    onVisibleChange: this.onVisibleChange,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    container: popupContainer,
                    style: popupStyle,
                    className: popupClassName,
                    trigger: trigger }),
                _react2.default.createElement(
                    'div',
                    { className: panelBodyClassName },
                    _react2.default.createElement(
                        'div',
                        { className: prefix + 'date-picker-panel-header' },
                        dateInput,
                        timeInput
                    ),
                    panelBody,
                    panelFooter
                )
            )
        );
    };

    return DatePicker;
}(_react.Component), _class.propTypes = {
    prefix: _propTypes2.default.string,
    /**
     * 输入框内置标签
     */
    label: _propTypes2.default.node,
    /**
     * 输入框状态
     */
    state: _propTypes2.default.oneOf(['success', 'error']),
    /**
     * 输入提示
     */
    placeholder: _propTypes2.default.string,
    /**
     * 默认展现的月
     * @return {MomentObject} 返回包含指定月份的 moment 对象实例
     */
    defaultVisibleMonth: _propTypes2.default.func,
    /**
     * 日期值（受控）moment 对象
     */
    value: _utils.checkMomentObj,
    /**
     * 初始日期值，moment 对象
     */
    defaultValue: _utils.checkMomentObj,
    /**
     * 日期值的格式（用于限定用户输入和展示）
     */
    format: _propTypes2.default.string,
    /**
     * 是否使用时间控件，传入 TimePicker 的属性 { defaultValue, format, ... }
     */
    showTime: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),
    /**
     * 每次选择日期时是否重置时间（仅在 showTime 开启时有效）
     */
    resetTime: _propTypes2.default.bool,
    /**
     * 禁用日期函数
     * @param {MomentObject} 日期值
     * @return {Boolean} 是否禁用
     */
    disabledDate: _propTypes2.default.func,
    /**
     * 自定义面板页脚
     * @return {Node} 自定义的面板页脚组件
     */
    footerRender: _propTypes2.default.func,
    /**
     * 日期值改变时的回调
     * @return {MomentObject} 日期值
     */
    onChange: _propTypes2.default.func,
    /**
     * 点击确认按钮时的回调
     * @return {MomentObject} 日期值
     */
    onOk: _propTypes2.default.func,
    /**
     * 输入框尺寸
     */
    size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
    /**
     * 是否禁用
     */
    disabled: _propTypes2.default.bool,
    /**
     * 是否显示清空按钮
     */
    hasClear: _propTypes2.default.bool,
    /**
     * 弹层显示状态
     */
    visible: _propTypes2.default.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _propTypes2.default.bool,
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _propTypes2.default.func,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _propTypes2.default.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式
     */
    popupAlign: _propTypes2.default.string,
    /**
     * 弹层容器
     * @param {Element} target 目标元素
     * @return {Element} 弹层的容器元素
     */
    popupContainer: _propTypes2.default.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _propTypes2.default.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _propTypes2.default.string,
    /**
     * 弹层其他属性
     */
    popupProps: _propTypes2.default.object,
    locale: _propTypes2.default.object,
    className: _propTypes2.default.string
}, _class.defaultProps = {
    prefix: 'next-',
    format: 'YYYY-MM-DD',
    size: 'medium',
    showTime: false,
    resetTime: false,
    disabledDate: function disabledDate() {
        return false;
    },
    footerRender: function footerRender() {
        return null;
    },
    hasClear: true,
    popupTriggerType: 'click',
    popupAlign: 'tl tl',
    locale: _zhCn2.default.DatePicker,
    onChange: _nextUtil.func.noop,
    onVisibleChange: _nextUtil.func.noop,
    onOk: _nextUtil.func.noop
}, _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onSelectCalendarPanel = function (value) {
        var _props2 = _this2.props,
            showTime = _props2.showTime,
            resetTime = _props2.resetTime,
            onChange = _props2.onChange;


        var prevValue = _this2.state.value;
        var newValue = value;
        if (showTime) {
            if (!prevValue) {
                // 第一次选择日期值时，如果设置了默认时间，则使用该默认时间
                if (showTime.defaultValue) {
                    newValue = (0, _util.resetValueTime)(value, showTime.defaultValue);
                }
            } else if (!resetTime) {
                // 非第一选择日期，如果开启了 resetTime 属性，则记住之前选择的时间值
                newValue = (0, _util.resetValueTime)(value, prevValue);
            }
        }

        if (!('value' in _this2.props)) {
            _this2.setState({
                value: newValue,
                inputing: false
            });
        }

        if (!prevValue || newValue.valueOf() !== prevValue.valueOf()) {
            onChange(newValue);
        }

        if (!showTime) {
            _this2.onVisibleChange(false, 'calendarSelect');
        }
    };

    this.onSelectTimePanel = function (value) {
        if (!('value' in _this2.props)) {
            _this2.setState({
                value: value,
                inputing: false
            });
        }
        if (value.valueOf() !== _this2.state.value.valueOf()) {
            _this2.props.onChange(value);
        }
    };

    this.clearValue = function () {
        _this2.setState({
            value: null,
            dateInputStr: '',
            timeInputStr: ''
        });
        if (_this2.state.value) {
            _this2.props.onChange(null);
        }
    };

    this.onDateInputChange = function (inputStr, e, eventType) {
        if (!('value' in _this2.props)) {
            if (eventType === 'clear' || !inputStr) {
                e.stopPropagation();
                _this2.clearValue();
            } else {
                _this2.setState({
                    dateInputStr: inputStr,
                    inputing: 'date'
                });
            }
        }
    };

    this.onTimeInputChange = function (inputStr) {
        if (!('value' in _this2.props)) {
            _this2.setState({
                timeInputStr: inputStr,
                inputing: 'time'
            });
        }
    };

    this.onDateInputBlur = function () {
        var dateInputStr = _this2.state.dateInputStr;

        if (dateInputStr) {
            var _props3 = _this2.props,
                format = _props3.format,
                onChange = _props3.onChange,
                disabledDate = _props3.disabledDate;

            var parsed = (0, _moment2.default)(dateInputStr, format, true);
            if (parsed.isValid() && !disabledDate(parsed)) {
                _this2.setState({
                    value: parsed,
                    dateInputStr: '',
                    inputing: false
                });
                onChange(parsed);
            }
        }
    };

    this.onTimeInputBlur = function () {
        var _props4 = _this2.props,
            showTime = _props4.showTime,
            onChange = _props4.onChange;
        var _state2 = _this2.state,
            value = _state2.value,
            timeInputStr = _state2.timeInputStr;

        var timeFormat = showTime.format || _util.DEFAULT_TIME_FORMAT;
        if (timeInputStr) {
            var parsed = (0, _moment2.default)(timeInputStr, timeFormat, true);
            if (parsed.isValid()) {
                var hour = parsed.hour();
                var minute = parsed.minute();
                var second = parsed.second();
                var newValue = value.clone().hour(hour).minute(minute).second(second);

                _this2.setState({
                    value: newValue,
                    timeInputStr: '',
                    inputing: false
                });

                onChange(newValue);
            }
        }
    };

    this.onFoucsDateInput = function () {
        if (_this2.state.panel !== _util.PANEL.DATE) {
            _this2.setState({
                panel: _util.PANEL.DATE
            });
        }
    };

    this.onFoucsTimeInput = function () {
        if (_this2.state.panel !== _util.PANEL.TIME) {
            _this2.setState({
                panel: _util.PANEL.TIME
            });
        }
    };

    this.onVisibleChange = function (visible, reason) {
        if (!('visible' in _this2.props)) {
            _this2.setState({
                visible: visible
            });
        }
        _this2.props.onVisibleChange(visible, reason);
    };

    this.changePanel = function (panel) {
        _this2.setState({
            panel: panel
        });
    };

    this.onOk = function () {
        _this2.onVisibleChange(false, 'okBtnClick');
        _this2.props.onOk(_this2.state.value);
    };
}, _temp);
DatePicker.displayName = 'DatePicker';
exports.default = _nextConfigProvider2.default.config(DatePicker);
module.exports = exports['default'];