'use strict';

exports.__esModule = true;
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames6 = require('classnames');

var _classnames7 = _interopRequireDefault(_classnames6);

var _nextOverlay = require('../../next-overlay/lib/index.js');

var _nextOverlay2 = _interopRequireDefault(_nextOverlay);

var _nextInput = require('../../next-input/lib/index.js');

var _nextInput2 = _interopRequireDefault(_nextInput);

var _rangeCalendar = require('../../next-calendar/lib/range-calendar.js');

var _rangeCalendar2 = _interopRequireDefault(_rangeCalendar);

var _panel = require('../../next-time-picker/lib/panel.js');

var _panel2 = _interopRequireDefault(_panel);

var _zhCn = require('../../next-locale/lib/zh-cn.js');

var _zhCn2 = _interopRequireDefault(_zhCn);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _nextUtil = require('../../next-util/lib/index.js');

var _util = require('./util/index.js');

var _panelFooter = require('./module/panel-footer.js');

var _panelFooter2 = _interopRequireDefault(_panelFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Popup = _nextOverlay2.default.Popup;


function mapInputStateName(name) {
    return {
        startValue: 'startDateInputStr',
        endValue: 'endDateInputStr',
        startTime: 'startTimeInputStr',
        endTime: 'endTimeInputStr'
    }[name];
}

function mapTimeToValue(name) {
    return {
        startTime: 'startValue',
        endTime: 'endValue'
    }[name];
}

function getFormatValues(values) {
    if (!Array.isArray(values)) {
        return [null, null];
    }
    if (values[0] && !_moment2.default.isMoment(values[0])) {
        values[0] = null;
    }
    if (values[1] && !_moment2.default.isMoment(values[1])) {
        values[1] = null;
    }
    return values;
}

/**
 * DatePicker.RangePicker
*/
var RangePicker = (_temp = _class = function (_Component) {
    (0, _inherits3.default)(RangePicker, _Component);

    function RangePicker(props, context) {
        (0, _classCallCheck3.default)(this, RangePicker);

        var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props, context));

        _this.onSelectCalendarPanel = function (value) {
            var _this$props = _this.props,
                showTime = _this$props.showTime,
                resetTime = _this$props.resetTime,
                onChange = _this$props.onChange;


            _this.setState(function (_ref) {
                var prevActiveDateInput = _ref.activeDateInput,
                    prevStartValue = _ref.startValue,
                    prevEndValue = _ref.endValue;

                var newState = {
                    activeDateInput: prevActiveDateInput,
                    inputing: false
                };

                var newValue = value;

                switch (prevActiveDateInput) {
                    case 'startValue':
                        {
                            if (!prevEndValue || value.valueOf() >= prevEndValue.valueOf()) {
                                newState.activeDateInput = 'endValue';
                            }

                            if (showTime) {
                                if (!prevStartValue) {
                                    // 第一次选择，如果设置了时间默认值，则使用该默认时间
                                    if (showTime.defaultValue) {
                                        newValue = (0, _util.resetValueTime)(value, showTime.defaultValue);
                                    }
                                } else if (!resetTime) {
                                    // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值
                                    newValue = (0, _util.resetValueTime)(value, prevStartValue);
                                }
                            }

                            newState.startValue = newValue;

                            if (prevEndValue && value.valueOf() > prevEndValue.valueOf()) {
                                newState.endValue = null;
                            }
                            break;
                        }

                    case 'endValue':
                        if (!prevStartValue) {
                            newState.activeDateInput = 'startValue';
                        }

                        if (showTime) {
                            if (!prevEndValue) {
                                // 第一次选择，如果设置了时间默认值，则使用该默认时间
                                if (showTime.defaultValue) {
                                    newValue = (0, _util.resetValueTime)(value, showTime.defaultValue);
                                }
                            } else if (!resetTime) {
                                // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值
                                newValue = (0, _util.resetValueTime)(value, prevEndValue);
                            }
                        }

                        newState.endValue = newValue;

                        // 选择了一个比开始日期更小的结束日期，此时表示用户重新选择了
                        if (prevStartValue && value.valueOf() < prevStartValue.valueOf()) {
                            newState.startValue = value;
                            newState.endValue = null;
                        }
                        break;
                }
                return newState;
            }, function () {
                onChange([_this.state.startValue, _this.state.endValue]);
            });
        };

        _this.clearRange = function () {
            _this.setState({
                startValue: null,
                endValue: null,
                startDateInputStr: '',
                endDateInputStr: '',
                startTimeInputStr: '',
                endTimeInputStr: ''
            });
            _this.props.onChange([]);
        };

        _this.onDateInputChange = function (inputStr, e, eventType) {
            if (eventType === 'clear' /* clear 不需要受控 */) {
                    e.stopPropagation();
                    _this.clearRange();
                } else if (!('value' in _this.props)) {
                var _this$setState;

                var stateName = mapInputStateName(_this.state.activeDateInput);
                _this.setState((_this$setState = {}, _this$setState[stateName] = inputStr, _this$setState.inputing = _this.state.activeDateInput, _this$setState));
            }
        };

        _this.onDateInputBlur = function () {
            var stateName = mapInputStateName(_this.state.activeDateInput);
            var dateInputStr = _this.state[stateName];
            if (dateInputStr) {
                var _this$props2 = _this.props,
                    format = _this$props2.format,
                    onChange = _this$props2.onChange,
                    disabledDate = _this$props2.disabledDate;

                var parsed = (0, _moment2.default)(dateInputStr, format, true);
                if (parsed.isValid() && !disabledDate(parsed)) {
                    var _this$setState2;

                    _this.setState((_this$setState2 = {}, _this$setState2[_this.state.activeDateInput] = parsed, _this$setState2[stateName] = '', _this$setState2.inputing = false, _this$setState2), function () {
                        onChange([_this.state.startValue, _this.state.endValue]);
                    });
                }
            }
        };

        _this.onFocusDateInput = function (type) {
            if (type !== _this.state.activeDateInput) {
                _this.setState({
                    activeDateInput: type
                });
            }
            if (_this.state.panel !== _util.PANEL.DATE) {
                _this.setState({
                    panel: _util.PANEL.DATE
                });
            }
        };

        _this.onFocusTimeInput = function (type) {
            if (type !== _this.state.activeDateInput) {
                _this.setState({
                    activeDateInput: type
                });
            }

            if (_this.state.panel !== _util.PANEL.TIME) {
                _this.setState({
                    panel: _util.PANEL.TIME
                });
            }
        };

        _this.onSelectStartTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    startValue: value,
                    inputing: false
                });
            }
            if (value.valueOf() !== _this.state.startValue.valueOf()) {
                _this.props.onChange([value, _this.state.endValue]);
            }
        };

        _this.onSelectEndTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    endValue: value,
                    inputing: false
                });
            }
            if (value.valueOf() !== _this.state.endValue.valueOf()) {
                _this.props.onChange([_this.state.startValue, value]);
            }
        };

        _this.onTimeInputChange = function (inputStr) {
            if (!('value' in _this.props)) {
                var _this$setState3;

                var stateName = mapInputStateName(_this.state.activeDateInput);
                _this.setState((_this$setState3 = {}, _this$setState3[stateName] = inputStr, _this$setState3.inputing = _this.state.activeDateInput, _this$setState3));
            }
        };

        _this.onTimeInputBlur = function () {
            var stateName = mapInputStateName(_this.state.activeDateInput);
            var timeInputStr = _this.state[stateName];
            if (timeInputStr) {
                var _this$props3 = _this.props,
                    showTime = _this$props3.showTime,
                    onChange = _this$props3.onChange;

                var timeFormat = showTime.format || _util.DEFAULT_TIME_FORMAT;
                var parsed = (0, _moment2.default)(timeInputStr, timeFormat, true);
                if (parsed.isValid()) {
                    var _this$setState4;

                    var hour = parsed.hour();
                    var minute = parsed.minute();
                    var second = parsed.second();
                    var valueName = mapTimeToValue(_this.state.activeDateInput);
                    var newValue = _this.state[valueName].clone().hour(hour).minute(minute).second(second);

                    _this.setState((_this$setState4 = {}, _this$setState4[valueName] = newValue, _this$setState4[stateName] = '', _this$setState4.inputing = false, _this$setState4), function () {
                        onChange([_this.state.startValue, _this.state.endValue]);
                    });
                }
            }
        };

        _this.onVisibleChange = function (visible, reason) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, reason);
        };

        _this.changePanel = function (panel) {
            _this.setState({
                panel: panel
            });
        };

        _this.onOk = function () {
            _this.onVisibleChange(false, 'okBtnClick');
            _this.props.onOk([_this.state.startValue, _this.state.endValue]);
        };

        var values = getFormatValues(props.value || props.defaultValue);
        _this.state = {
            visible: props.visible || props.defaultVisible,
            startValue: values[0],
            endValue: values[1],
            startDateInputStr: '',
            endDateInputStr: '',
            activeDateInput: 'startValue',
            startTimeInputStr: '',
            endTimeInputStr: '',
            inputing: false, // 当前是否处于输入状态
            panel: _util.PANEL.DATE
        };
        return _this;
    }

    RangePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var values = getFormatValues(nextProps.value);
            this.setState({
                startValue: values[0],
                endValue: values[1]
            });
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    RangePicker.prototype.render = function render() {
        var _classnames,
            _classnames2,
            _classnames3,
            _classnames4,
            _classnames5,
            _this2 = this,
            _PANEL$DATE$PANEL$TIM;

        var _props = this.props,
            prefix = _props.prefix,
            format = _props.format,
            defaultVisibleMonth = _props.defaultVisibleMonth,
            showTime = _props.showTime,
            disabledDate = _props.disabledDate,
            footerRender = _props.footerRender,
            label = _props.label,
            inputState = _props.state,
            size = _props.size,
            disabled = _props.disabled,
            hasClear = _props.hasClear,
            popupTriggerType = _props.popupTriggerType,
            popupAlign = _props.popupAlign,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            className = _props.className,
            locale = _props.locale,
            others = (0, _objectWithoutProperties3.default)(_props, ['prefix', 'format', 'defaultVisibleMonth', 'showTime', 'disabledDate', 'footerRender', 'label', 'state', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className', 'locale']);


        var state = this.state;

        var classNames = (0, _classnames7.default)((_classnames = {}, _classnames[prefix + 'range-picker'] = true, _classnames['' + prefix + size] = size, _classnames[prefix + 'disabled'] = disabled, _classnames), className);

        var panelBodyClassName = (0, _classnames7.default)((_classnames2 = {}, _classnames2[prefix + 'range-picker-body'] = true, _classnames2[prefix + 'range-picker-body-show-time'] = showTime, _classnames2));

        var triggerCls = (0, _classnames7.default)((_classnames3 = {}, _classnames3[prefix + 'range-picker-trigger'] = true, _classnames3[prefix + 'error'] = inputState === 'error', _classnames3));

        var startDateInputCls = (0, _classnames7.default)((_classnames4 = {}, _classnames4[prefix + 'range-picker-panel-input-start-date'] = true, _classnames4[prefix + 'focus'] = state.activeDateInput === 'startValue', _classnames4));

        var endDateInputCls = (0, _classnames7.default)((_classnames5 = {}, _classnames5[prefix + 'range-picker-panel-input-end-date'] = true, _classnames5[prefix + 'focus'] = state.activeDateInput === 'endValue', _classnames5));

        var startDateInputValue = state.inputing === 'startValue' ? state.startDateInputStr : state.startValue && state.startValue.format(format) || '';
        var endDateInputValue = state.inputing === 'endValue' ? state.endDateInputStr : state.endValue && state.endValue.format(format) || '';

        var startTriggerValue = startDateInputValue;
        var endTriggerValue = endDateInputValue;

        var sharedInputProps = {
            size: size,
            disabled: disabled,
            onChange: this.onDateInputChange,
            onBlur: this.onDateInputBlur,
            onPressEnter: this.onDateInputBlur
        };

        var startDateInput = _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedInputProps, {
            placeholder: format,
            value: startDateInputValue,
            onFocus: function onFocus() {
                return _this2.onFocusDateInput('startValue');
            },
            className: startDateInputCls }));

        var endDateInput = _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedInputProps, {
            placeholder: format,
            value: endDateInputValue,
            onFocus: function onFocus() {
                return _this2.onFocusDateInput('endValue');
            },
            className: endDateInputCls }));

        var datePanel = _react2.default.createElement(_rangeCalendar2.default, {
            defaultVisibleMonth: defaultVisibleMonth,
            disabledDate: disabledDate,
            onSelect: this.onSelectCalendarPanel,
            startValue: state.startValue,
            endValue: state.endValue });

        var startTimeInput = null;
        var endTimeInput = null;
        var timePanel = null;
        var panelFooter = footerRender();

        if (showTime) {
            var timeFormat = showTime.format || _util.DEFAULT_TIME_FORMAT;
            var datetimeFormat = format + ' ' + timeFormat;

            var startTimeInputValue = state.inputing === 'startTime' ? state.startTimeInputStr : state.startValue && state.startValue.format(timeFormat) || '';
            var endTimeInputValue = state.inputing === 'endTime' ? state.endTimeInputStr : state.endValue && state.endValue.format(timeFormat) || '';

            startTriggerValue = state.startValue && state.startValue.format(datetimeFormat) || '';
            endTriggerValue = state.endValue && state.endValue.format(datetimeFormat) || '';

            var sharedTimeInputProps = {
                size: size,
                placeholder: timeFormat,
                onFocus: this.onFocusTimeInput,
                onBlur: this.onTimeInputBlur,
                onPressEnter: this.onTimeInputBlur,
                onChange: this.onTimeInputChange
            };

            startTimeInput = _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedTimeInputProps, {
                value: startTimeInputValue,
                disabled: disabled || !state.startValue || !state.endValue,
                onFocus: function onFocus() {
                    return _this2.onFocusTimeInput('startTime');
                },
                className: prefix + 'range-picker-panel-input-start-time'
            }));

            endTimeInput = _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedTimeInputProps, {
                value: endTimeInputValue,
                disabled: disabled || !state.endValue || !state.startValue,
                onFocus: function onFocus() {
                    return _this2.onFocusTimeInput('endTime');
                },
                className: prefix + 'range-picker-panel-input-end-time'
            }));

            var showSecond = timeFormat.indexOf('s') > -1;

            var sharedTimePickerProps = (0, _extends3.default)({}, showTime, {
                prefix: prefix,
                disabled: disabled,
                showSecond: showSecond
            });

            timePanel = _react2.default.createElement(
                'div',
                { className: prefix + 'range-picker-panel-time' },
                _react2.default.createElement(_panel2.default, (0, _extends3.default)({}, sharedTimePickerProps, { className: prefix + 'range-picker-panel-time-start', value: state.startValue, onSelect: this.onSelectStartTime })),
                _react2.default.createElement(_panel2.default, (0, _extends3.default)({}, sharedTimePickerProps, { className: prefix + 'range-picker-panel-time-end', value: state.endValue, onSelect: this.onSelectEndTime }))
            );

            panelFooter = panelFooter || _react2.default.createElement(_panelFooter2.default, {
                prefix: prefix,
                value: state.startValue && state.endValue,
                locale: locale,
                panel: state.panel,
                onPanelChange: this.changePanel,
                onOk: this.onOk
            });
        }

        var panelBody = (_PANEL$DATE$PANEL$TIM = {}, _PANEL$DATE$PANEL$TIM[_util.PANEL.DATE] = datePanel, _PANEL$DATE$PANEL$TIM[_util.PANEL.TIME] = timePanel, _PANEL$DATE$PANEL$TIM)[state.panel];

        var allowClear = state.startValue && state.endValue && hasClear;
        var trigger = _react2.default.createElement(
            'div',
            { className: triggerCls },
            _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedInputProps, {
                label: label,
                placeholder: locale.startPlaceholder,
                value: startTriggerValue,
                hasBorder: false,
                className: prefix + 'range-picker-trigger-input',
                onFocus: function onFocus() {
                    return _this2.onFocusDateInput('startValue');
                } })),
            _react2.default.createElement(
                'span',
                { className: prefix + 'range-picker-trigger-separator' },
                '-'
            ),
            _react2.default.createElement(_nextInput2.default, (0, _extends3.default)({}, sharedInputProps, {
                placeholder: locale.endPlaceholder,
                value: endTriggerValue,
                hasBorder: false,
                className: prefix + 'range-picker-trigger-input',
                onFocus: function onFocus() {
                    return _this2.onFocusDateInput('endValue');
                },
                hasClear: allowClear,
                hint: 'calendar' }))
        );

        return _react2.default.createElement(
            'div',
            (0, _extends3.default)({}, _nextUtil.obj.pickOthers(RangePicker.propTypes, others), { className: classNames }),
            _react2.default.createElement(
                Popup,
                (0, _extends3.default)({}, popupProps, {
                    autoFoucs: true,
                    disabled: disabled,
                    visible: state.visible,
                    onVisibleChange: this.onVisibleChange,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    container: popupContainer,
                    style: popupStyle,
                    className: popupClassName,
                    trigger: trigger }),
                _react2.default.createElement(
                    'div',
                    { className: panelBodyClassName },
                    _react2.default.createElement(
                        'div',
                        { className: prefix + 'range-picker-panel-header' },
                        _react2.default.createElement(
                            'div',
                            { className: prefix + 'range-picker-panel-input' },
                            startDateInput,
                            startTimeInput,
                            _react2.default.createElement(
                                'span',
                                { className: prefix + 'range-picker-panel-input-separator' },
                                '-'
                            ),
                            endDateInput,
                            endTimeInput
                        )
                    ),
                    panelBody,
                    panelFooter
                )
            )
        );
    };

    return RangePicker;
}(_react.Component), _class.propTypes = {
    prefix: _propTypes2.default.string,
    /**
     * 默认展示的起始月份
     * @return {MomentObject} 返回包含指定月份的 moment 对象实例
     */
    defaultVisibleMonth: _propTypes2.default.func,
    /**
     * 日期范围值数组 [moment, moment]
     */
    value: _propTypes2.default.array,
    /**
     * 初始的日期范围值数组 [moment, moment]
     */
    defaultValue: _propTypes2.default.array,
    /**
     * 日期格式
     */
    format: _propTypes2.default.string,
    /**
     * 是否使用时间控件，支持传入 TimePicker 的属性
     */
    showTime: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),
    /**
     * 每次选择是否重置时间（仅在 showTime 开启时有效）
     */
    resetTime: _propTypes2.default.bool,
    /**
     * 禁用日期函数
     * @param {MomentObject} 日期值
     * @return {Boolean} 是否禁用
     */
    disabledDate: _propTypes2.default.func,
    /**
     * 自定义面板页脚
     * @return {Node} 自定义的面板页脚组件
     */
    footerRender: _propTypes2.default.func,
    /**
     * 日期范围值改变时的回调
     * @return {MomentObject} 日期值
     */
    onChange: _propTypes2.default.func,
    /**
     * 点击确认按钮时的回调
     * @return {MomentObject} 日期值
     */
    onOk: _propTypes2.default.func,
    /**
     * 输入框内置标签
     */
    label: _propTypes2.default.node,
    /**
     * 输入框状态
     */
    state: _propTypes2.default.oneOf(['error', 'success']),
    /**
     * 输入框尺寸
     */
    size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
    /**
     * 是否禁用
     */
    disabled: _propTypes2.default.bool,
    /**
     * 是否显示清空按钮
     */
    hasClear: _propTypes2.default.bool,
    /**
     * 弹层显示状态
     */
    visible: _propTypes2.default.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _propTypes2.default.bool,
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _propTypes2.default.func,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _propTypes2.default.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式
     */
    popupAlign: _propTypes2.default.string,
    /**
     * 弹层容器
     * @param {Element} target 目标元素
     * @return {Element} 弹层的容器元素
     */
    popupContainer: _propTypes2.default.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _propTypes2.default.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _propTypes2.default.string,
    /**
     * 弹层其他属性
     */
    popupProps: _propTypes2.default.object,
    locale: _propTypes2.default.object,
    className: _propTypes2.default.string
}, _class.defaultProps = {
    prefix: 'next-',
    format: 'YYYY-MM-DD',
    size: 'medium',
    showTime: false,
    resetTime: false,
    disabledDate: function disabledDate() {
        return false;
    },
    footerRender: function footerRender() {
        return null;
    },
    hasClear: true,
    popupTriggerType: 'click',
    popupAlign: 'tl tl',
    locale: _zhCn2.default.DatePicker,
    onChange: _nextUtil.func.noop,
    onOk: _nextUtil.func.noop,
    onVisibleChange: _nextUtil.func.noop
}, _temp);
RangePicker.displayName = 'RangePicker';
exports.default = RangePicker;
module.exports = exports['default'];