/// <reference types="react" />

import React from "react";

export interface AutoCompleteProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 选择器尺寸
   */
  size?: "small" | "medium" | "large";

  /**
   * 当前值，用于受控模式
   */
  value?: string | number;

  /**
   * 初始化的默认值
   */
  defaultValue?: any;

  /**
   * Select发生改变时触发的回调
   */
  onChange?: (() => void);

  /**
   * 没有值的时候的占位符
   */
  placeholder?: string;

  /**
   * 下拉菜单是否与选择器对齐
   */
  autoWidth?: boolean;

  /**
   * 自定义内联 label
   */
  label?: React.ReactNode;

  /**
   * 是否只读，只读模式下可以展开弹层但不能选
   */
  readOnly?: boolean;

  /**
   * 是否禁用选择器
   */
  disabled?: boolean;

  /**
   * 当前弹层是否显示
   */
  visible?: boolean;

  /**
   * 弹层初始化是否显示
   */
  defaultVisible?: boolean;

  /**
   * 弹层显示或隐藏时触发的回调
   */
  onVisibleChange?: (() => void);

  /**
   * 弹层挂载的容器节点
   */
  popupContainer?: string | (() => void);

  /**
   * 弹层的 className
   */
  popupClassName?: any;

  /**
   * 弹层的内联样式
   */
  popupStyle?: {};

  /**
   * 添加到弹层上的属性
   */
  popupProps?: {};

  /**
   * 自定义弹层的内容
   */
  popupContent?: React.ReactNode;

  /**
   * 是否使用本地过滤，在数据源为远程的时候需要关闭此项
   */
  filterLocal?: boolean;

  /**
   * 本地过滤方法，返回一个 Boolean 值确定是否保留
   */
  filter?: (() => void);

  /**
   * 传入的数据源，可以动态渲染子项
   */
  dataSource?: Array<any>;

  /**
   * 渲染 MenuItem 内容的方法
   */
  itemRender?: (() => void);

  /**
   * 填充到选择框里的值的 key，默认是 value
   */
  fillProps?: string;

  /**
   * 是否有清除按钮
   */
  hasClear?: boolean;
}

export class AutoComplete extends React.Component<AutoCompleteProps, any> {}

export interface OptionGroupProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 设置分组的文案
   */
  label?: React.ReactNode;
}

export class OptionGroup extends React.Component<OptionGroupProps, any> {}

export interface OptionProps extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 选项值
   */
  value: any;

  /**
   * 是否禁用
   */
  disabled?: boolean;
}

export class Option extends React.Component<OptionProps, any> {}
export interface SelectProps extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 选择器尺寸
   */
  size?: "small" | "medium" | "large";

  /**
   * 当前值，用于受控模式
   */
  value?: any;

  /**
   * 初始的默认值
   */
  defaultValue?: any;

  /**
   * Select发生改变时触发的回调
   */
  onChange?: (() => void);

  /**
   * 没有值的时候的占位符
   */
  placeholder?: string;

  /**
   * 下拉菜单是否与选择器对齐
   */
  autoWidth?: boolean;

  /**
   * 自定义内联 label
   */
  label?: React.ReactNode;

  /**
   * 是否只读，只读模式下可以展开弹层但不能选
   */
  readOnly?: boolean;

  /**
   * 是否禁用选择器
   */
  disabled?: boolean;

  /**
   * 当前弹层是否显示
   */
  visible?: boolean;

  /**
   * 弹层初始化是否显示
   */
  defaultVisible?: boolean;

  /**
   * 弹层显示或隐藏时触发的回调
   */
  onVisibleChange?: (() => void);

  /**
   * 弹层挂载的容器节点
   */
  popupContainer?: string | (() => void);

  /**
   * 弹层的 className
   */
  popupClassName?: any;

  /**
   * 弹层的内联样式
   */
  popupStyle?: {};

  /**
   * 添加到弹层上的属性
   */
  popupProps?: {};

  /**
   * 自定义弹层的内容
   */
  popupContent?: React.ReactNode;

  /**
   * 是否使用本地过滤，在数据源为远程的时候需要关闭此项
   */
  filterLocal?: boolean;

  /**
   * 本地过滤方法，返回一个 Boolean 值确定是否保留
   */
  filter?: (() => void);

  /**
   * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)
   */
  dataSource?: Array<any>;

  /**
   * 渲染 MenuItem 内容的方法
   */
  itemRender?: (() => void);

  /**
   * 选择器模式
   */
  mode?: "single" | "multiple" | "tag";

  /**
   * 弹层内容为空的文案
   */
  noFoundContent?: React.ReactNode;

  /**
   * 是否有边框
   */
  hasBorder?: boolean;

  /**
   * 展开后是否能搜索（tag 模式下固定为true）
   */
  showSearch?: boolean;

  /**
   * 当搜索框值变化时回调
   */
  onSearch?: (() => void);

  /**
   * 多选模式下是否有全选功能
   */
  hasSelectAll?: boolean | string;

  /**
   * 填充到选择框里的值的 key
   */
  fillProps?: string;

  /**
   * onChange返回的value使用dataSource的对象
   */
  useDetailValue?: boolean;

  /**
   * dataSource变化的时是否保留已选的内容
   */
  cacheValue?: boolean;

  /**
   * 渲染 Select 展现内容的方法
   */
  valueRender?: (() => void);

  /**
   * 受控搜索值，一般不需要设置
   */
  searchValue?: string;

  /**
   * tag 删除回调
   */
  onRemove?: (() => void);
}

export default class Select extends React.Component<SelectProps, any> {
  static AutoComplete: typeof AutoComplete;
  static OptionGroup: typeof OptionGroup;
  static Option: typeof Option;
}
