/// <reference types="react" />

import React from "react";

export interface ItemProps extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 是否禁用
   */
  disabled?: boolean;

  /**
   * 帮助文本
   */
  helper?: React.ReactNode;

  /**
   * 菜单项标签内容
   */
  children?: React.ReactNode;
}

export class Item extends React.Component<ItemProps, any> {}

export interface SubMenuProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 标签内容
   */
  label?: React.ReactNode;

  /**
   * 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效
   */
  selectable?: boolean;

  /**
   * 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性
   */
  mode?: "inline" | "popup";

  /**
   * 菜单项或下一级子菜单
   */
  children?: React.ReactNode;
}

export class SubMenu extends React.Component<SubMenuProps, any> {}

export interface PopupItemProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 标签内容
   */
  label?: React.ReactNode;

  /**
   * 自定义弹层内容
   */
  children?: React.ReactNode;
}

export class PopupItem extends React.Component<PopupItemProps, any> {}

export interface CheckboxItemProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 是否选中
   */
  checked?: boolean;

  /**
   * 是否半选中
   */
  indeterminate?: boolean;

  /**
   * 是否禁用
   */
  disabled?: boolean;

  /**
   * 选中或取消选中触发的回调函数
   */
  onChange?: (() => void);

  /**
   * 帮助文本
   */
  helper?: React.ReactNode;

  /**
   * 标签内容
   */
  children?: React.ReactNode;
}

export class CheckboxItem extends React.Component<CheckboxItemProps, any> {}

export interface RadioItemProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 是否选中
   */
  checked?: boolean;

  /**
   * 是否禁用
   */
  disabled?: boolean;

  /**
   * 选中或取消选中触发的回调函数
   */
  onChange?: (() => void);

  /**
   * 帮助文本
   */
  helper?: React.ReactNode;

  /**
   * 标签内容
   */
  children?: React.ReactNode;
}

export class RadioItem extends React.Component<RadioItemProps, any> {}

export interface GroupProps extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 标签内容
   */
  label?: React.ReactNode;

  /**
   * 菜单项
   */
  children?: React.ReactNode;
}

export class Group extends React.Component<GroupProps, any> {}

export interface DividerProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {}

export class Divider extends React.Component<DividerProps, any> {}
export interface MenuProps extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 菜单项和子菜单
   */
  children?: React.ReactNode;

  /**
   * 点击菜单项触发的回调函数
   */
  onItemClick?: (() => void);

  /**
   * 当前打开的子菜单的 key 值
   */
  openKeys?: string | Array<any>;

  /**
   * 初始打开的子菜单的 key 值
   */
  defaultOpenKeys?: string | Array<any>;

  /**
   * 打开或关闭子菜单触发的回调函数
   */
  onOpen?: (() => void);

  /**
   * 子菜单打开的模式
   */
  mode?: "inline" | "popup";

  /**
   * 子菜单打开的触发行为
   */
  triggerType?: "click" | "hover";

  /**
   * 展开内连子菜单的模式，同时可以展开一个子菜单还是多个子菜单，该属性仅在 mode 为 inline 时生效
   */
  openMode?: "single" | "multiple";

  /**
   * 内连子菜单缩进距离
   */
  inlineIndent?: number;

  /**
   * 是否自动让弹层的宽度和菜单项保持一致，如果弹层的宽度比菜单项小则和菜单项保持一致，如果宽度大于菜单项则不做处理
   */
  popupAutoWidth?: boolean;

  /**
   * 弹层的对齐方式
   */
  popupAlign?: "follow" | "outside";

  /**
   * 弹层自定义 props
   */
  popupProps?: {};

  /**
   * 弹出子菜单自定义 className
   */
  popupClassName?: string;

  /**
   * 弹出子菜单自定义 style
   */
  popupStyle?: {};

  /**
   * 当前选中菜单项的 key 值
   */
  selectedKeys?: string | Array<any>;

  /**
   * 初始选中菜单项的 key 值
   */
  defaultSelectedKeys?: string | Array<any>;

  /**
   * 选中或取消选中菜单项触发的回调函数
   */
  onSelect?: (() => void);

  /**
   * 选中模式，单选还是多选，默认无值，不可选
   */
  selectMode?: "single" | "multiple";

  /**
   * 是否只能选择第一层菜单项（不能选择子菜单中的菜单项）
   */
  shallowSelect?: boolean;

  /**
   * 是否显示选中图标，如果设置为 false 需配合配置平台设置选中时的背景色以示区分
   */
  hasSelectedIcon?: boolean;

  /**
   * 菜单第一层展示方向
   */
  direction?: "ver" | "hoz";

  /**
   * 自定义菜单头部
   */
  header?: React.ReactNode;

  /**
   * 自定义菜单尾部
   */
  footer?: React.ReactNode;

  /**
   * 是否自动获得焦点
   */
  autoFocus?: boolean;

  /**
   * 当前获得焦点的子菜单或菜单项 key 值
   */
  focusedKey?: string;
}

export default class Menu extends React.Component<MenuProps, any> {
  static Item: typeof Item;
  static SubMenu: typeof SubMenu;
  static PopupItem: typeof PopupItem;
  static CheckboxItem: typeof CheckboxItem;
  static RadioItem: typeof RadioItem;
  static Group: typeof Group;
  static Divider: typeof Divider;
  static create(props: {}): void;
}
